/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type AvalaraAccountsApi interface {

	/*
		DELETEAvalaraAccountsAvalaraAccountId Delete an avalara account

		Delete an avalara account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param avalaraAccountId The resource's id
		@return ApiDELETEAvalaraAccountsAvalaraAccountIdRequest
	*/
	DELETEAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiDELETEAvalaraAccountsAvalaraAccountIdRequest

	// DELETEAvalaraAccountsAvalaraAccountIdExecute executes the request
	DELETEAvalaraAccountsAvalaraAccountIdExecute(r ApiDELETEAvalaraAccountsAvalaraAccountIdRequest) (*http.Response, error)

	/*
		GETAvalaraAccounts List all avalara accounts

		List all avalara accounts

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETAvalaraAccountsRequest
	*/
	GETAvalaraAccounts(ctx context.Context) ApiGETAvalaraAccountsRequest

	// GETAvalaraAccountsExecute executes the request
	GETAvalaraAccountsExecute(r ApiGETAvalaraAccountsRequest) (*http.Response, error)

	/*
		GETAvalaraAccountsAvalaraAccountId Retrieve an avalara account

		Retrieve an avalara account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param avalaraAccountId The resource's id
		@return ApiGETAvalaraAccountsAvalaraAccountIdRequest
	*/
	GETAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiGETAvalaraAccountsAvalaraAccountIdRequest

	// GETAvalaraAccountsAvalaraAccountIdExecute executes the request
	//  @return AvalaraAccount
	GETAvalaraAccountsAvalaraAccountIdExecute(r ApiGETAvalaraAccountsAvalaraAccountIdRequest) (*AvalaraAccount, *http.Response, error)

	/*
		PATCHAvalaraAccountsAvalaraAccountId Update an avalara account

		Update an avalara account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param avalaraAccountId The resource's id
		@return ApiPATCHAvalaraAccountsAvalaraAccountIdRequest
	*/
	PATCHAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiPATCHAvalaraAccountsAvalaraAccountIdRequest

	// PATCHAvalaraAccountsAvalaraAccountIdExecute executes the request
	PATCHAvalaraAccountsAvalaraAccountIdExecute(r ApiPATCHAvalaraAccountsAvalaraAccountIdRequest) (*http.Response, error)

	/*
		POSTAvalaraAccounts Create an avalara account

		Create an avalara account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTAvalaraAccountsRequest
	*/
	POSTAvalaraAccounts(ctx context.Context) ApiPOSTAvalaraAccountsRequest

	// POSTAvalaraAccountsExecute executes the request
	POSTAvalaraAccountsExecute(r ApiPOSTAvalaraAccountsRequest) (*http.Response, error)
}

// AvalaraAccountsApiService AvalaraAccountsApi service
type AvalaraAccountsApiService service

type ApiDELETEAvalaraAccountsAvalaraAccountIdRequest struct {
	ctx              context.Context
	ApiService       AvalaraAccountsApi
	avalaraAccountId string
}

func (r ApiDELETEAvalaraAccountsAvalaraAccountIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEAvalaraAccountsAvalaraAccountIdExecute(r)
}

/*
DELETEAvalaraAccountsAvalaraAccountId Delete an avalara account

Delete an avalara account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param avalaraAccountId The resource's id
 @return ApiDELETEAvalaraAccountsAvalaraAccountIdRequest
*/
func (a *AvalaraAccountsApiService) DELETEAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiDELETEAvalaraAccountsAvalaraAccountIdRequest {
	return ApiDELETEAvalaraAccountsAvalaraAccountIdRequest{
		ApiService:       a,
		ctx:              ctx,
		avalaraAccountId: avalaraAccountId,
	}
}

// Execute executes the request
func (a *AvalaraAccountsApiService) DELETEAvalaraAccountsAvalaraAccountIdExecute(r ApiDELETEAvalaraAccountsAvalaraAccountIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvalaraAccountsApiService.DELETEAvalaraAccountsAvalaraAccountId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts/{avalaraAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"avalaraAccountId"+"}", url.PathEscape(parameterToString(r.avalaraAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETAvalaraAccountsRequest struct {
	ctx        context.Context
	ApiService AvalaraAccountsApi
}

func (r ApiGETAvalaraAccountsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETAvalaraAccountsExecute(r)
}

/*
GETAvalaraAccounts List all avalara accounts

List all avalara accounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETAvalaraAccountsRequest
*/
func (a *AvalaraAccountsApiService) GETAvalaraAccounts(ctx context.Context) ApiGETAvalaraAccountsRequest {
	return ApiGETAvalaraAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AvalaraAccountsApiService) GETAvalaraAccountsExecute(r ApiGETAvalaraAccountsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvalaraAccountsApiService.GETAvalaraAccounts")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETAvalaraAccountsAvalaraAccountIdRequest struct {
	ctx              context.Context
	ApiService       AvalaraAccountsApi
	avalaraAccountId string
}

func (r ApiGETAvalaraAccountsAvalaraAccountIdRequest) Execute() (*AvalaraAccount, *http.Response, error) {
	return r.ApiService.GETAvalaraAccountsAvalaraAccountIdExecute(r)
}

/*
GETAvalaraAccountsAvalaraAccountId Retrieve an avalara account

Retrieve an avalara account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param avalaraAccountId The resource's id
 @return ApiGETAvalaraAccountsAvalaraAccountIdRequest
*/
func (a *AvalaraAccountsApiService) GETAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiGETAvalaraAccountsAvalaraAccountIdRequest {
	return ApiGETAvalaraAccountsAvalaraAccountIdRequest{
		ApiService:       a,
		ctx:              ctx,
		avalaraAccountId: avalaraAccountId,
	}
}

// Execute executes the request
//  @return AvalaraAccount
func (a *AvalaraAccountsApiService) GETAvalaraAccountsAvalaraAccountIdExecute(r ApiGETAvalaraAccountsAvalaraAccountIdRequest) (*AvalaraAccount, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AvalaraAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvalaraAccountsApiService.GETAvalaraAccountsAvalaraAccountId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts/{avalaraAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"avalaraAccountId"+"}", url.PathEscape(parameterToString(r.avalaraAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHAvalaraAccountsAvalaraAccountIdRequest struct {
	ctx                  context.Context
	ApiService           AvalaraAccountsApi
	avalaraAccountId     string
	avalaraAccountUpdate *AvalaraAccountUpdate
}

func (r ApiPATCHAvalaraAccountsAvalaraAccountIdRequest) AvalaraAccountUpdate(avalaraAccountUpdate AvalaraAccountUpdate) ApiPATCHAvalaraAccountsAvalaraAccountIdRequest {
	r.avalaraAccountUpdate = &avalaraAccountUpdate
	return r
}

func (r ApiPATCHAvalaraAccountsAvalaraAccountIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHAvalaraAccountsAvalaraAccountIdExecute(r)
}

/*
PATCHAvalaraAccountsAvalaraAccountId Update an avalara account

Update an avalara account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param avalaraAccountId The resource's id
 @return ApiPATCHAvalaraAccountsAvalaraAccountIdRequest
*/
func (a *AvalaraAccountsApiService) PATCHAvalaraAccountsAvalaraAccountId(ctx context.Context, avalaraAccountId string) ApiPATCHAvalaraAccountsAvalaraAccountIdRequest {
	return ApiPATCHAvalaraAccountsAvalaraAccountIdRequest{
		ApiService:       a,
		ctx:              ctx,
		avalaraAccountId: avalaraAccountId,
	}
}

// Execute executes the request
func (a *AvalaraAccountsApiService) PATCHAvalaraAccountsAvalaraAccountIdExecute(r ApiPATCHAvalaraAccountsAvalaraAccountIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvalaraAccountsApiService.PATCHAvalaraAccountsAvalaraAccountId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts/{avalaraAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"avalaraAccountId"+"}", url.PathEscape(parameterToString(r.avalaraAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.avalaraAccountUpdate == nil {
		return nil, reportError("avalaraAccountUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.avalaraAccountUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTAvalaraAccountsRequest struct {
	ctx                  context.Context
	ApiService           AvalaraAccountsApi
	avalaraAccountCreate *AvalaraAccountCreate
}

func (r ApiPOSTAvalaraAccountsRequest) AvalaraAccountCreate(avalaraAccountCreate AvalaraAccountCreate) ApiPOSTAvalaraAccountsRequest {
	r.avalaraAccountCreate = &avalaraAccountCreate
	return r
}

func (r ApiPOSTAvalaraAccountsRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTAvalaraAccountsExecute(r)
}

/*
POSTAvalaraAccounts Create an avalara account

Create an avalara account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTAvalaraAccountsRequest
*/
func (a *AvalaraAccountsApiService) POSTAvalaraAccounts(ctx context.Context) ApiPOSTAvalaraAccountsRequest {
	return ApiPOSTAvalaraAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AvalaraAccountsApiService) POSTAvalaraAccountsExecute(r ApiPOSTAvalaraAccountsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvalaraAccountsApiService.POSTAvalaraAccounts")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.avalaraAccountCreate == nil {
		return nil, reportError("avalaraAccountCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.avalaraAccountCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
