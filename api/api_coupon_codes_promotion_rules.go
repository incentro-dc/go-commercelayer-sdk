/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type CouponCodesPromotionRulesApi interface {

	/*
		DELETECouponCodesPromotionRulesCouponCodesPromotionRuleId Delete a coupon codes promotion rule

		Delete a coupon codes promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param couponCodesPromotionRuleId The resource's id
		@return ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
	*/
	DELETECouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest

	// DELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute executes the request
	DELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*http.Response, error)

	/*
		GETCouponCodesPromotionRules List all coupon codes promotion rules

		List all coupon codes promotion rules

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETCouponCodesPromotionRulesRequest
	*/
	GETCouponCodesPromotionRules(ctx context.Context) ApiGETCouponCodesPromotionRulesRequest

	// GETCouponCodesPromotionRulesExecute executes the request
	GETCouponCodesPromotionRulesExecute(r ApiGETCouponCodesPromotionRulesRequest) (*http.Response, error)

	/*
		GETCouponCodesPromotionRulesCouponCodesPromotionRuleId Retrieve a coupon codes promotion rule

		Retrieve a coupon codes promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param couponCodesPromotionRuleId The resource's id
		@return ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
	*/
	GETCouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest

	// GETCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute executes the request
	//  @return CouponCodesPromotionRule
	GETCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*CouponCodesPromotionRule, *http.Response, error)

	/*
		GETCouponIdPromotionRule Retrieve the promotion rule associated to the coupon

		Retrieve the promotion rule associated to the coupon

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param couponId The resource's id
		@return ApiGETCouponIdPromotionRuleRequest
	*/
	GETCouponIdPromotionRule(ctx context.Context, couponId string) ApiGETCouponIdPromotionRuleRequest

	// GETCouponIdPromotionRuleExecute executes the request
	GETCouponIdPromotionRuleExecute(r ApiGETCouponIdPromotionRuleRequest) (*http.Response, error)

	/*
		GETExternalPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the external promotion

		Retrieve the coupon codes promotion rule associated to the external promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param externalPromotionId The resource's id
		@return ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETExternalPromotionIdCouponCodesPromotionRule(ctx context.Context, externalPromotionId string) ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest

	// GETExternalPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETExternalPromotionIdCouponCodesPromotionRuleExecute(r ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETFixedAmountPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the fixed amount promotion

		Retrieve the coupon codes promotion rule associated to the fixed amount promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedAmountPromotionId The resource's id
		@return ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETFixedAmountPromotionIdCouponCodesPromotionRule(ctx context.Context, fixedAmountPromotionId string) ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest

	// GETFixedAmountPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETFixedAmountPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETFixedPricePromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the fixed price promotion

		Retrieve the coupon codes promotion rule associated to the fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedPricePromotionId The resource's id
		@return ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest
	*/
	GETFixedPricePromotionIdCouponCodesPromotionRule(ctx context.Context, fixedPricePromotionId string) ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest

	// GETFixedPricePromotionIdCouponCodesPromotionRuleExecute executes the request
	GETFixedPricePromotionIdCouponCodesPromotionRuleExecute(r ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETFreeGiftPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the free gift promotion

		Retrieve the coupon codes promotion rule associated to the free gift promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param freeGiftPromotionId The resource's id
		@return ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETFreeGiftPromotionIdCouponCodesPromotionRule(ctx context.Context, freeGiftPromotionId string) ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest

	// GETFreeGiftPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETFreeGiftPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETFreeShippingPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the free shipping promotion

		Retrieve the coupon codes promotion rule associated to the free shipping promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param freeShippingPromotionId The resource's id
		@return ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETFreeShippingPromotionIdCouponCodesPromotionRule(ctx context.Context, freeShippingPromotionId string) ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest

	// GETFreeShippingPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETFreeShippingPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETPercentageDiscountPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the percentage discount promotion

		Retrieve the coupon codes promotion rule associated to the percentage discount promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param percentageDiscountPromotionId The resource's id
		@return ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETPercentageDiscountPromotionIdCouponCodesPromotionRule(ctx context.Context, percentageDiscountPromotionId string) ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest

	// GETPercentageDiscountPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETPercentageDiscountPromotionIdCouponCodesPromotionRuleExecute(r ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		GETPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the promotion

		Retrieve the coupon codes promotion rule associated to the promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param promotionId The resource's id
		@return ApiGETPromotionIdCouponCodesPromotionRuleRequest
	*/
	GETPromotionIdCouponCodesPromotionRule(ctx context.Context, promotionId string) ApiGETPromotionIdCouponCodesPromotionRuleRequest

	// GETPromotionIdCouponCodesPromotionRuleExecute executes the request
	GETPromotionIdCouponCodesPromotionRuleExecute(r ApiGETPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error)

	/*
		PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleId Update a coupon codes promotion rule

		Update a coupon codes promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param couponCodesPromotionRuleId The resource's id
		@return ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
	*/
	PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest

	// PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute executes the request
	PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*http.Response, error)

	/*
		POSTCouponCodesPromotionRules Create a coupon codes promotion rule

		Create a coupon codes promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTCouponCodesPromotionRulesRequest
	*/
	POSTCouponCodesPromotionRules(ctx context.Context) ApiPOSTCouponCodesPromotionRulesRequest

	// POSTCouponCodesPromotionRulesExecute executes the request
	POSTCouponCodesPromotionRulesExecute(r ApiPOSTCouponCodesPromotionRulesRequest) (*http.Response, error)
}

// CouponCodesPromotionRulesApiService CouponCodesPromotionRulesApi service
type CouponCodesPromotionRulesApiService service

type ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest struct {
	ctx                        context.Context
	ApiService                 CouponCodesPromotionRulesApi
	couponCodesPromotionRuleId string
}

func (r ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r)
}

/*
DELETECouponCodesPromotionRulesCouponCodesPromotionRuleId Delete a coupon codes promotion rule

Delete a coupon codes promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param couponCodesPromotionRuleId The resource's id
 @return ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
*/
func (a *CouponCodesPromotionRulesApiService) DELETECouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest {
	return ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		couponCodesPromotionRuleId: couponCodesPromotionRuleId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) DELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiDELETECouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.DELETECouponCodesPromotionRulesCouponCodesPromotionRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupon_codes_promotion_rules/{couponCodesPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"couponCodesPromotionRuleId"+"}", url.PathEscape(parameterToString(r.couponCodesPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETCouponCodesPromotionRulesRequest struct {
	ctx        context.Context
	ApiService CouponCodesPromotionRulesApi
}

func (r ApiGETCouponCodesPromotionRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETCouponCodesPromotionRulesExecute(r)
}

/*
GETCouponCodesPromotionRules List all coupon codes promotion rules

List all coupon codes promotion rules

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETCouponCodesPromotionRulesRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETCouponCodesPromotionRules(ctx context.Context) ApiGETCouponCodesPromotionRulesRequest {
	return ApiGETCouponCodesPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETCouponCodesPromotionRulesExecute(r ApiGETCouponCodesPromotionRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETCouponCodesPromotionRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupon_codes_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest struct {
	ctx                        context.Context
	ApiService                 CouponCodesPromotionRulesApi
	couponCodesPromotionRuleId string
}

func (r ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) Execute() (*CouponCodesPromotionRule, *http.Response, error) {
	return r.ApiService.GETCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r)
}

/*
GETCouponCodesPromotionRulesCouponCodesPromotionRuleId Retrieve a coupon codes promotion rule

Retrieve a coupon codes promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param couponCodesPromotionRuleId The resource's id
 @return ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETCouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest {
	return ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		couponCodesPromotionRuleId: couponCodesPromotionRuleId,
	}
}

// Execute executes the request
//  @return CouponCodesPromotionRule
func (a *CouponCodesPromotionRulesApiService) GETCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiGETCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*CouponCodesPromotionRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CouponCodesPromotionRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETCouponCodesPromotionRulesCouponCodesPromotionRuleId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupon_codes_promotion_rules/{couponCodesPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"couponCodesPromotionRuleId"+"}", url.PathEscape(parameterToString(r.couponCodesPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETCouponIdPromotionRuleRequest struct {
	ctx        context.Context
	ApiService CouponCodesPromotionRulesApi
	couponId   string
}

func (r ApiGETCouponIdPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETCouponIdPromotionRuleExecute(r)
}

/*
GETCouponIdPromotionRule Retrieve the promotion rule associated to the coupon

Retrieve the promotion rule associated to the coupon

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param couponId The resource's id
 @return ApiGETCouponIdPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETCouponIdPromotionRule(ctx context.Context, couponId string) ApiGETCouponIdPromotionRuleRequest {
	return ApiGETCouponIdPromotionRuleRequest{
		ApiService: a,
		ctx:        ctx,
		couponId:   couponId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETCouponIdPromotionRuleExecute(r ApiGETCouponIdPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETCouponIdPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupons/{couponId}/promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"couponId"+"}", url.PathEscape(parameterToString(r.couponId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          CouponCodesPromotionRulesApi
	externalPromotionId string
}

func (r ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETExternalPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETExternalPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the external promotion

Retrieve the coupon codes promotion rule associated to the external promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalPromotionId The resource's id
 @return ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETExternalPromotionIdCouponCodesPromotionRule(ctx context.Context, externalPromotionId string) ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		externalPromotionId: externalPromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETExternalPromotionIdCouponCodesPromotionRuleExecute(r ApiGETExternalPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETExternalPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external_promotions/{externalPromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"externalPromotionId"+"}", url.PathEscape(parameterToString(r.externalPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                    context.Context
	ApiService             CouponCodesPromotionRulesApi
	fixedAmountPromotionId string
}

func (r ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedAmountPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETFixedAmountPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the fixed amount promotion

Retrieve the coupon codes promotion rule associated to the fixed amount promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedAmountPromotionId The resource's id
 @return ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETFixedAmountPromotionIdCouponCodesPromotionRule(ctx context.Context, fixedAmountPromotionId string) ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:             a,
		ctx:                    ctx,
		fixedAmountPromotionId: fixedAmountPromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETFixedAmountPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFixedAmountPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETFixedAmountPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_amount_promotions/{fixedAmountPromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedAmountPromotionId"+"}", url.PathEscape(parameterToString(r.fixedAmountPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                   context.Context
	ApiService            CouponCodesPromotionRulesApi
	fixedPricePromotionId string
}

func (r ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedPricePromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETFixedPricePromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the fixed price promotion

Retrieve the coupon codes promotion rule associated to the fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedPricePromotionId The resource's id
 @return ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETFixedPricePromotionIdCouponCodesPromotionRule(ctx context.Context, fixedPricePromotionId string) ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETFixedPricePromotionIdCouponCodesPromotionRuleExecute(r ApiGETFixedPricePromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETFixedPricePromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterToString(r.fixedPricePromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          CouponCodesPromotionRulesApi
	freeGiftPromotionId string
}

func (r ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeGiftPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETFreeGiftPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the free gift promotion

Retrieve the coupon codes promotion rule associated to the free gift promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param freeGiftPromotionId The resource's id
 @return ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETFreeGiftPromotionIdCouponCodesPromotionRule(ctx context.Context, freeGiftPromotionId string) ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		freeGiftPromotionId: freeGiftPromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETFreeGiftPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFreeGiftPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETFreeGiftPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_gift_promotions/{freeGiftPromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeGiftPromotionId"+"}", url.PathEscape(parameterToString(r.freeGiftPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                     context.Context
	ApiService              CouponCodesPromotionRulesApi
	freeShippingPromotionId string
}

func (r ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeShippingPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETFreeShippingPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the free shipping promotion

Retrieve the coupon codes promotion rule associated to the free shipping promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param freeShippingPromotionId The resource's id
 @return ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETFreeShippingPromotionIdCouponCodesPromotionRule(ctx context.Context, freeShippingPromotionId string) ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:              a,
		ctx:                     ctx,
		freeShippingPromotionId: freeShippingPromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETFreeShippingPromotionIdCouponCodesPromotionRuleExecute(r ApiGETFreeShippingPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETFreeShippingPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_shipping_promotions/{freeShippingPromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeShippingPromotionId"+"}", url.PathEscape(parameterToString(r.freeShippingPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx                           context.Context
	ApiService                    CouponCodesPromotionRulesApi
	percentageDiscountPromotionId string
}

func (r ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPercentageDiscountPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETPercentageDiscountPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the percentage discount promotion

Retrieve the coupon codes promotion rule associated to the percentage discount promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param percentageDiscountPromotionId The resource's id
 @return ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETPercentageDiscountPromotionIdCouponCodesPromotionRule(ctx context.Context, percentageDiscountPromotionId string) ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:                    a,
		ctx:                           ctx,
		percentageDiscountPromotionId: percentageDiscountPromotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETPercentageDiscountPromotionIdCouponCodesPromotionRuleExecute(r ApiGETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETPercentageDiscountPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/percentage_discount_promotions/{percentageDiscountPromotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"percentageDiscountPromotionId"+"}", url.PathEscape(parameterToString(r.percentageDiscountPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETPromotionIdCouponCodesPromotionRuleRequest struct {
	ctx         context.Context
	ApiService  CouponCodesPromotionRulesApi
	promotionId string
}

func (r ApiGETPromotionIdCouponCodesPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPromotionIdCouponCodesPromotionRuleExecute(r)
}

/*
GETPromotionIdCouponCodesPromotionRule Retrieve the coupon codes promotion rule associated to the promotion

Retrieve the coupon codes promotion rule associated to the promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionId The resource's id
 @return ApiGETPromotionIdCouponCodesPromotionRuleRequest
*/
func (a *CouponCodesPromotionRulesApiService) GETPromotionIdCouponCodesPromotionRule(ctx context.Context, promotionId string) ApiGETPromotionIdCouponCodesPromotionRuleRequest {
	return ApiGETPromotionIdCouponCodesPromotionRuleRequest{
		ApiService:  a,
		ctx:         ctx,
		promotionId: promotionId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) GETPromotionIdCouponCodesPromotionRuleExecute(r ApiGETPromotionIdCouponCodesPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.GETPromotionIdCouponCodesPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotions/{promotionId}/coupon_codes_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionId"+"}", url.PathEscape(parameterToString(r.promotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest struct {
	ctx                            context.Context
	ApiService                     CouponCodesPromotionRulesApi
	couponCodesPromotionRuleId     string
	couponCodesPromotionRuleUpdate *CouponCodesPromotionRuleUpdate
}

func (r ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) CouponCodesPromotionRuleUpdate(couponCodesPromotionRuleUpdate CouponCodesPromotionRuleUpdate) ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest {
	r.couponCodesPromotionRuleUpdate = &couponCodesPromotionRuleUpdate
	return r
}

func (r ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r)
}

/*
PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleId Update a coupon codes promotion rule

Update a coupon codes promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param couponCodesPromotionRuleId The resource's id
 @return ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest
*/
func (a *CouponCodesPromotionRulesApiService) PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleId(ctx context.Context, couponCodesPromotionRuleId string) ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest {
	return ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		couponCodesPromotionRuleId: couponCodesPromotionRuleId,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdExecute(r ApiPATCHCouponCodesPromotionRulesCouponCodesPromotionRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.PATCHCouponCodesPromotionRulesCouponCodesPromotionRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupon_codes_promotion_rules/{couponCodesPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"couponCodesPromotionRuleId"+"}", url.PathEscape(parameterToString(r.couponCodesPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.couponCodesPromotionRuleUpdate == nil {
		return nil, reportError("couponCodesPromotionRuleUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.couponCodesPromotionRuleUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTCouponCodesPromotionRulesRequest struct {
	ctx                            context.Context
	ApiService                     CouponCodesPromotionRulesApi
	couponCodesPromotionRuleCreate *CouponCodesPromotionRuleCreate
}

func (r ApiPOSTCouponCodesPromotionRulesRequest) CouponCodesPromotionRuleCreate(couponCodesPromotionRuleCreate CouponCodesPromotionRuleCreate) ApiPOSTCouponCodesPromotionRulesRequest {
	r.couponCodesPromotionRuleCreate = &couponCodesPromotionRuleCreate
	return r
}

func (r ApiPOSTCouponCodesPromotionRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTCouponCodesPromotionRulesExecute(r)
}

/*
POSTCouponCodesPromotionRules Create a coupon codes promotion rule

Create a coupon codes promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTCouponCodesPromotionRulesRequest
*/
func (a *CouponCodesPromotionRulesApiService) POSTCouponCodesPromotionRules(ctx context.Context) ApiPOSTCouponCodesPromotionRulesRequest {
	return ApiPOSTCouponCodesPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CouponCodesPromotionRulesApiService) POSTCouponCodesPromotionRulesExecute(r ApiPOSTCouponCodesPromotionRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CouponCodesPromotionRulesApiService.POSTCouponCodesPromotionRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/coupon_codes_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.couponCodesPromotionRuleCreate == nil {
		return nil, reportError("couponCodesPromotionRuleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.couponCodesPromotionRuleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
