/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type FixedPricePromotionsApi interface {

	/*
		DELETEFixedPricePromotionsFixedPricePromotionId Delete a fixed price promotion

		Delete a fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedPricePromotionId The resource's id
		@return ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest
	*/
	DELETEFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest

	// DELETEFixedPricePromotionsFixedPricePromotionIdExecute executes the request
	DELETEFixedPricePromotionsFixedPricePromotionIdExecute(r ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest) (*http.Response, error)

	/*
		GETFixedPricePromotions List all fixed price promotions

		List all fixed price promotions

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETFixedPricePromotionsRequest
	*/
	GETFixedPricePromotions(ctx context.Context) ApiGETFixedPricePromotionsRequest

	// GETFixedPricePromotionsExecute executes the request
	GETFixedPricePromotionsExecute(r ApiGETFixedPricePromotionsRequest) (*http.Response, error)

	/*
		GETFixedPricePromotionsFixedPricePromotionId Retrieve a fixed price promotion

		Retrieve a fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedPricePromotionId The resource's id
		@return ApiGETFixedPricePromotionsFixedPricePromotionIdRequest
	*/
	GETFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiGETFixedPricePromotionsFixedPricePromotionIdRequest

	// GETFixedPricePromotionsFixedPricePromotionIdExecute executes the request
	//  @return FixedPricePromotion
	GETFixedPricePromotionsFixedPricePromotionIdExecute(r ApiGETFixedPricePromotionsFixedPricePromotionIdRequest) (*FixedPricePromotion, *http.Response, error)

	/*
		PATCHFixedPricePromotionsFixedPricePromotionId Update a fixed price promotion

		Update a fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedPricePromotionId The resource's id
		@return ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest
	*/
	PATCHFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest

	// PATCHFixedPricePromotionsFixedPricePromotionIdExecute executes the request
	PATCHFixedPricePromotionsFixedPricePromotionIdExecute(r ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest) (*http.Response, error)

	/*
		POSTFixedPricePromotions Create a fixed price promotion

		Create a fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTFixedPricePromotionsRequest
	*/
	POSTFixedPricePromotions(ctx context.Context) ApiPOSTFixedPricePromotionsRequest

	// POSTFixedPricePromotionsExecute executes the request
	POSTFixedPricePromotionsExecute(r ApiPOSTFixedPricePromotionsRequest) (*http.Response, error)
}

// FixedPricePromotionsApiService FixedPricePromotionsApi service
type FixedPricePromotionsApiService service

type ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest struct {
	ctx                   context.Context
	ApiService            FixedPricePromotionsApi
	fixedPricePromotionId string
}

func (r ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEFixedPricePromotionsFixedPricePromotionIdExecute(r)
}

/*
DELETEFixedPricePromotionsFixedPricePromotionId Delete a fixed price promotion

Delete a fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedPricePromotionId The resource's id
 @return ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest
*/
func (a *FixedPricePromotionsApiService) DELETEFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest {
	return ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
func (a *FixedPricePromotionsApiService) DELETEFixedPricePromotionsFixedPricePromotionIdExecute(r ApiDELETEFixedPricePromotionsFixedPricePromotionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FixedPricePromotionsApiService.DELETEFixedPricePromotionsFixedPricePromotionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterToString(r.fixedPricePromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFixedPricePromotionsRequest struct {
	ctx        context.Context
	ApiService FixedPricePromotionsApi
}

func (r ApiGETFixedPricePromotionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedPricePromotionsExecute(r)
}

/*
GETFixedPricePromotions List all fixed price promotions

List all fixed price promotions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETFixedPricePromotionsRequest
*/
func (a *FixedPricePromotionsApiService) GETFixedPricePromotions(ctx context.Context) ApiGETFixedPricePromotionsRequest {
	return ApiGETFixedPricePromotionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FixedPricePromotionsApiService) GETFixedPricePromotionsExecute(r ApiGETFixedPricePromotionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FixedPricePromotionsApiService.GETFixedPricePromotions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETFixedPricePromotionsFixedPricePromotionIdRequest struct {
	ctx                   context.Context
	ApiService            FixedPricePromotionsApi
	fixedPricePromotionId string
}

func (r ApiGETFixedPricePromotionsFixedPricePromotionIdRequest) Execute() (*FixedPricePromotion, *http.Response, error) {
	return r.ApiService.GETFixedPricePromotionsFixedPricePromotionIdExecute(r)
}

/*
GETFixedPricePromotionsFixedPricePromotionId Retrieve a fixed price promotion

Retrieve a fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedPricePromotionId The resource's id
 @return ApiGETFixedPricePromotionsFixedPricePromotionIdRequest
*/
func (a *FixedPricePromotionsApiService) GETFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiGETFixedPricePromotionsFixedPricePromotionIdRequest {
	return ApiGETFixedPricePromotionsFixedPricePromotionIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
//  @return FixedPricePromotion
func (a *FixedPricePromotionsApiService) GETFixedPricePromotionsFixedPricePromotionIdExecute(r ApiGETFixedPricePromotionsFixedPricePromotionIdRequest) (*FixedPricePromotion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FixedPricePromotion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FixedPricePromotionsApiService.GETFixedPricePromotionsFixedPricePromotionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterToString(r.fixedPricePromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest struct {
	ctx                       context.Context
	ApiService                FixedPricePromotionsApi
	fixedPricePromotionId     string
	fixedPricePromotionUpdate *FixedPricePromotionUpdate
}

func (r ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest) FixedPricePromotionUpdate(fixedPricePromotionUpdate FixedPricePromotionUpdate) ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest {
	r.fixedPricePromotionUpdate = &fixedPricePromotionUpdate
	return r
}

func (r ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHFixedPricePromotionsFixedPricePromotionIdExecute(r)
}

/*
PATCHFixedPricePromotionsFixedPricePromotionId Update a fixed price promotion

Update a fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedPricePromotionId The resource's id
 @return ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest
*/
func (a *FixedPricePromotionsApiService) PATCHFixedPricePromotionsFixedPricePromotionId(ctx context.Context, fixedPricePromotionId string) ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest {
	return ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
func (a *FixedPricePromotionsApiService) PATCHFixedPricePromotionsFixedPricePromotionIdExecute(r ApiPATCHFixedPricePromotionsFixedPricePromotionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FixedPricePromotionsApiService.PATCHFixedPricePromotionsFixedPricePromotionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterToString(r.fixedPricePromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fixedPricePromotionUpdate == nil {
		return nil, reportError("fixedPricePromotionUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fixedPricePromotionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTFixedPricePromotionsRequest struct {
	ctx                       context.Context
	ApiService                FixedPricePromotionsApi
	fixedPricePromotionCreate *FixedPricePromotionCreate
}

func (r ApiPOSTFixedPricePromotionsRequest) FixedPricePromotionCreate(fixedPricePromotionCreate FixedPricePromotionCreate) ApiPOSTFixedPricePromotionsRequest {
	r.fixedPricePromotionCreate = &fixedPricePromotionCreate
	return r
}

func (r ApiPOSTFixedPricePromotionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTFixedPricePromotionsExecute(r)
}

/*
POSTFixedPricePromotions Create a fixed price promotion

Create a fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTFixedPricePromotionsRequest
*/
func (a *FixedPricePromotionsApiService) POSTFixedPricePromotions(ctx context.Context) ApiPOSTFixedPricePromotionsRequest {
	return ApiPOSTFixedPricePromotionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FixedPricePromotionsApiService) POSTFixedPricePromotionsExecute(r ApiPOSTFixedPricePromotionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FixedPricePromotionsApiService.POSTFixedPricePromotions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fixedPricePromotionCreate == nil {
		return nil, reportError("fixedPricePromotionCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fixedPricePromotionCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
