/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type LineItemOptionsApi interface {

	/*
		DELETELineItemOptionsLineItemOptionId Delete a line item option

		Delete a line item option

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineItemOptionId The resource's id
		@return ApiDELETELineItemOptionsLineItemOptionIdRequest
	*/
	DELETELineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiDELETELineItemOptionsLineItemOptionIdRequest

	// DELETELineItemOptionsLineItemOptionIdExecute executes the request
	DELETELineItemOptionsLineItemOptionIdExecute(r ApiDELETELineItemOptionsLineItemOptionIdRequest) (*http.Response, error)

	/*
		GETLineItemIdLineItemOptions Retrieve the line item options associated to the line item

		Retrieve the line item options associated to the line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineItemId The resource's id
		@return ApiGETLineItemIdLineItemOptionsRequest
	*/
	GETLineItemIdLineItemOptions(ctx context.Context, lineItemId string) ApiGETLineItemIdLineItemOptionsRequest

	// GETLineItemIdLineItemOptionsExecute executes the request
	GETLineItemIdLineItemOptionsExecute(r ApiGETLineItemIdLineItemOptionsRequest) (*http.Response, error)

	/*
		GETLineItemOptions List all line item options

		List all line item options

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETLineItemOptionsRequest
	*/
	GETLineItemOptions(ctx context.Context) ApiGETLineItemOptionsRequest

	// GETLineItemOptionsExecute executes the request
	GETLineItemOptionsExecute(r ApiGETLineItemOptionsRequest) (*http.Response, error)

	/*
		GETLineItemOptionsLineItemOptionId Retrieve a line item option

		Retrieve a line item option

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineItemOptionId The resource's id
		@return ApiGETLineItemOptionsLineItemOptionIdRequest
	*/
	GETLineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiGETLineItemOptionsLineItemOptionIdRequest

	// GETLineItemOptionsLineItemOptionIdExecute executes the request
	//  @return LineItemOption
	GETLineItemOptionsLineItemOptionIdExecute(r ApiGETLineItemOptionsLineItemOptionIdRequest) (*LineItemOption, *http.Response, error)

	/*
		PATCHLineItemOptionsLineItemOptionId Update a line item option

		Update a line item option

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param lineItemOptionId The resource's id
		@return ApiPATCHLineItemOptionsLineItemOptionIdRequest
	*/
	PATCHLineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiPATCHLineItemOptionsLineItemOptionIdRequest

	// PATCHLineItemOptionsLineItemOptionIdExecute executes the request
	PATCHLineItemOptionsLineItemOptionIdExecute(r ApiPATCHLineItemOptionsLineItemOptionIdRequest) (*http.Response, error)

	/*
		POSTLineItemOptions Create a line item option

		Create a line item option

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTLineItemOptionsRequest
	*/
	POSTLineItemOptions(ctx context.Context) ApiPOSTLineItemOptionsRequest

	// POSTLineItemOptionsExecute executes the request
	POSTLineItemOptionsExecute(r ApiPOSTLineItemOptionsRequest) (*http.Response, error)
}

// LineItemOptionsApiService LineItemOptionsApi service
type LineItemOptionsApiService service

type ApiDELETELineItemOptionsLineItemOptionIdRequest struct {
	ctx              context.Context
	ApiService       LineItemOptionsApi
	lineItemOptionId string
}

func (r ApiDELETELineItemOptionsLineItemOptionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETELineItemOptionsLineItemOptionIdExecute(r)
}

/*
DELETELineItemOptionsLineItemOptionId Delete a line item option

Delete a line item option

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lineItemOptionId The resource's id
 @return ApiDELETELineItemOptionsLineItemOptionIdRequest
*/
func (a *LineItemOptionsApiService) DELETELineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiDELETELineItemOptionsLineItemOptionIdRequest {
	return ApiDELETELineItemOptionsLineItemOptionIdRequest{
		ApiService:       a,
		ctx:              ctx,
		lineItemOptionId: lineItemOptionId,
	}
}

// Execute executes the request
func (a *LineItemOptionsApiService) DELETELineItemOptionsLineItemOptionIdExecute(r ApiDELETELineItemOptionsLineItemOptionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.DELETELineItemOptionsLineItemOptionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_item_options/{lineItemOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"lineItemOptionId"+"}", url.PathEscape(parameterToString(r.lineItemOptionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETLineItemIdLineItemOptionsRequest struct {
	ctx        context.Context
	ApiService LineItemOptionsApi
	lineItemId string
}

func (r ApiGETLineItemIdLineItemOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETLineItemIdLineItemOptionsExecute(r)
}

/*
GETLineItemIdLineItemOptions Retrieve the line item options associated to the line item

Retrieve the line item options associated to the line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lineItemId The resource's id
 @return ApiGETLineItemIdLineItemOptionsRequest
*/
func (a *LineItemOptionsApiService) GETLineItemIdLineItemOptions(ctx context.Context, lineItemId string) ApiGETLineItemIdLineItemOptionsRequest {
	return ApiGETLineItemIdLineItemOptionsRequest{
		ApiService: a,
		ctx:        ctx,
		lineItemId: lineItemId,
	}
}

// Execute executes the request
func (a *LineItemOptionsApiService) GETLineItemIdLineItemOptionsExecute(r ApiGETLineItemIdLineItemOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.GETLineItemIdLineItemOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_items/{lineItemId}/line_item_options"
	localVarPath = strings.Replace(localVarPath, "{"+"lineItemId"+"}", url.PathEscape(parameterToString(r.lineItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETLineItemOptionsRequest struct {
	ctx        context.Context
	ApiService LineItemOptionsApi
}

func (r ApiGETLineItemOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETLineItemOptionsExecute(r)
}

/*
GETLineItemOptions List all line item options

List all line item options

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETLineItemOptionsRequest
*/
func (a *LineItemOptionsApiService) GETLineItemOptions(ctx context.Context) ApiGETLineItemOptionsRequest {
	return ApiGETLineItemOptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LineItemOptionsApiService) GETLineItemOptionsExecute(r ApiGETLineItemOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.GETLineItemOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_item_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETLineItemOptionsLineItemOptionIdRequest struct {
	ctx              context.Context
	ApiService       LineItemOptionsApi
	lineItemOptionId string
}

func (r ApiGETLineItemOptionsLineItemOptionIdRequest) Execute() (*LineItemOption, *http.Response, error) {
	return r.ApiService.GETLineItemOptionsLineItemOptionIdExecute(r)
}

/*
GETLineItemOptionsLineItemOptionId Retrieve a line item option

Retrieve a line item option

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lineItemOptionId The resource's id
 @return ApiGETLineItemOptionsLineItemOptionIdRequest
*/
func (a *LineItemOptionsApiService) GETLineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiGETLineItemOptionsLineItemOptionIdRequest {
	return ApiGETLineItemOptionsLineItemOptionIdRequest{
		ApiService:       a,
		ctx:              ctx,
		lineItemOptionId: lineItemOptionId,
	}
}

// Execute executes the request
//  @return LineItemOption
func (a *LineItemOptionsApiService) GETLineItemOptionsLineItemOptionIdExecute(r ApiGETLineItemOptionsLineItemOptionIdRequest) (*LineItemOption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LineItemOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.GETLineItemOptionsLineItemOptionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_item_options/{lineItemOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"lineItemOptionId"+"}", url.PathEscape(parameterToString(r.lineItemOptionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHLineItemOptionsLineItemOptionIdRequest struct {
	ctx                  context.Context
	ApiService           LineItemOptionsApi
	lineItemOptionId     string
	lineItemOptionUpdate *LineItemOptionUpdate
}

func (r ApiPATCHLineItemOptionsLineItemOptionIdRequest) LineItemOptionUpdate(lineItemOptionUpdate LineItemOptionUpdate) ApiPATCHLineItemOptionsLineItemOptionIdRequest {
	r.lineItemOptionUpdate = &lineItemOptionUpdate
	return r
}

func (r ApiPATCHLineItemOptionsLineItemOptionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHLineItemOptionsLineItemOptionIdExecute(r)
}

/*
PATCHLineItemOptionsLineItemOptionId Update a line item option

Update a line item option

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lineItemOptionId The resource's id
 @return ApiPATCHLineItemOptionsLineItemOptionIdRequest
*/
func (a *LineItemOptionsApiService) PATCHLineItemOptionsLineItemOptionId(ctx context.Context, lineItemOptionId string) ApiPATCHLineItemOptionsLineItemOptionIdRequest {
	return ApiPATCHLineItemOptionsLineItemOptionIdRequest{
		ApiService:       a,
		ctx:              ctx,
		lineItemOptionId: lineItemOptionId,
	}
}

// Execute executes the request
func (a *LineItemOptionsApiService) PATCHLineItemOptionsLineItemOptionIdExecute(r ApiPATCHLineItemOptionsLineItemOptionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.PATCHLineItemOptionsLineItemOptionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_item_options/{lineItemOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"lineItemOptionId"+"}", url.PathEscape(parameterToString(r.lineItemOptionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lineItemOptionUpdate == nil {
		return nil, reportError("lineItemOptionUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lineItemOptionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTLineItemOptionsRequest struct {
	ctx                  context.Context
	ApiService           LineItemOptionsApi
	lineItemOptionCreate *LineItemOptionCreate
}

func (r ApiPOSTLineItemOptionsRequest) LineItemOptionCreate(lineItemOptionCreate LineItemOptionCreate) ApiPOSTLineItemOptionsRequest {
	r.lineItemOptionCreate = &lineItemOptionCreate
	return r
}

func (r ApiPOSTLineItemOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTLineItemOptionsExecute(r)
}

/*
POSTLineItemOptions Create a line item option

Create a line item option

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTLineItemOptionsRequest
*/
func (a *LineItemOptionsApiService) POSTLineItemOptions(ctx context.Context) ApiPOSTLineItemOptionsRequest {
	return ApiPOSTLineItemOptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *LineItemOptionsApiService) POSTLineItemOptionsExecute(r ApiPOSTLineItemOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LineItemOptionsApiService.POSTLineItemOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/line_item_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lineItemOptionCreate == nil {
		return nil, reportError("lineItemOptionCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lineItemOptionCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
