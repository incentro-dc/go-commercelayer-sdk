/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.5
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type OrderAmountPromotionRulesApi interface {

	/*
		DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleId Delete an order amount promotion rule

		Delete an order amount promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orderAmountPromotionRuleId The resource's id
		@return OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
	*/
	DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest

	// DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute executes the request
	DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*http.Response, error)

	/*
		GETExternalPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the external promotion

		Retrieve the order amount promotion rule associated to the external promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param externalPromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETExternalPromotionIdOrderAmountPromotionRule(ctx context.Context, externalPromotionId string) OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest

	// GETExternalPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETExternalPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETFixedAmountPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the fixed amount promotion

		Retrieve the order amount promotion rule associated to the fixed amount promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedAmountPromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETFixedAmountPromotionIdOrderAmountPromotionRule(ctx context.Context, fixedAmountPromotionId string) OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest

	// GETFixedAmountPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETFixedAmountPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETFixedPricePromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the fixed price promotion

		Retrieve the order amount promotion rule associated to the fixed price promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param fixedPricePromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest
	*/
	GETFixedPricePromotionIdOrderAmountPromotionRule(ctx context.Context, fixedPricePromotionId string) OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest

	// GETFixedPricePromotionIdOrderAmountPromotionRuleExecute executes the request
	GETFixedPricePromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETFreeGiftPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the free gift promotion

		Retrieve the order amount promotion rule associated to the free gift promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param freeGiftPromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETFreeGiftPromotionIdOrderAmountPromotionRule(ctx context.Context, freeGiftPromotionId string) OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest

	// GETFreeGiftPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETFreeGiftPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETFreeShippingPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the free shipping promotion

		Retrieve the order amount promotion rule associated to the free shipping promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param freeShippingPromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETFreeShippingPromotionIdOrderAmountPromotionRule(ctx context.Context, freeShippingPromotionId string) OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest

	// GETFreeShippingPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETFreeShippingPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETOrderAmountPromotionRules List all order amount promotion rules

		List all order amount promotion rules

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest
	*/
	GETOrderAmountPromotionRules(ctx context.Context) OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest

	// GETOrderAmountPromotionRulesExecute executes the request
	GETOrderAmountPromotionRulesExecute(r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest) (*http.Response, error)

	/*
		GETOrderAmountPromotionRulesOrderAmountPromotionRuleId Retrieve an order amount promotion rule

		Retrieve an order amount promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orderAmountPromotionRuleId The resource's id
		@return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
	*/
	GETOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest

	// GETOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute executes the request
	//  @return OrderAmountPromotionRule
	GETOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*OrderAmountPromotionRule, *http.Response, error)

	/*
		GETPercentageDiscountPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the percentage discount promotion

		Retrieve the order amount promotion rule associated to the percentage discount promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param percentageDiscountPromotionId The resource's id
		@return OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETPercentageDiscountPromotionIdOrderAmountPromotionRule(ctx context.Context, percentageDiscountPromotionId string) OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest

	// GETPercentageDiscountPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETPercentageDiscountPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		GETPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the promotion

		Retrieve the order amount promotion rule associated to the promotion

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param promotionId The resource's id
		@return OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest
	*/
	GETPromotionIdOrderAmountPromotionRule(ctx context.Context, promotionId string) OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest

	// GETPromotionIdOrderAmountPromotionRuleExecute executes the request
	GETPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error)

	/*
		PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleId Update an order amount promotion rule

		Update an order amount promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param orderAmountPromotionRuleId The resource's id
		@return OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
	*/
	PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest

	// PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute executes the request
	PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*http.Response, error)

	/*
		POSTOrderAmountPromotionRules Create an order amount promotion rule

		Create an order amount promotion rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest
	*/
	POSTOrderAmountPromotionRules(ctx context.Context) OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest

	// POSTOrderAmountPromotionRulesExecute executes the request
	POSTOrderAmountPromotionRulesExecute(r OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest) (*http.Response, error)
}

// OrderAmountPromotionRulesApiService OrderAmountPromotionRulesApi service
type OrderAmountPromotionRulesApiService service

type OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest struct {
	ctx                        context.Context
	ApiService                 OrderAmountPromotionRulesApi
	orderAmountPromotionRuleId string
}

func (r OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r)
}

/*
DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleId Delete an order amount promotion rule

Delete an order amount promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderAmountPromotionRuleId The resource's id
 @return OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
*/
func (a *OrderAmountPromotionRulesApiService) DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest {
	return OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		orderAmountPromotionRuleId: orderAmountPromotionRuleId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiDELETEOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.DELETEOrderAmountPromotionRulesOrderAmountPromotionRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_amount_promotion_rules/{orderAmountPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderAmountPromotionRuleId"+"}", url.PathEscape(parameterToString(r.orderAmountPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          OrderAmountPromotionRulesApi
	externalPromotionId string
}

func (r OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETExternalPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETExternalPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the external promotion

Retrieve the order amount promotion rule associated to the external promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalPromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETExternalPromotionIdOrderAmountPromotionRule(ctx context.Context, externalPromotionId string) OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		externalPromotionId: externalPromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETExternalPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETExternalPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETExternalPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external_promotions/{externalPromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"externalPromotionId"+"}", url.PathEscape(parameterToString(r.externalPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                    context.Context
	ApiService             OrderAmountPromotionRulesApi
	fixedAmountPromotionId string
}

func (r OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedAmountPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETFixedAmountPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the fixed amount promotion

Retrieve the order amount promotion rule associated to the fixed amount promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedAmountPromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETFixedAmountPromotionIdOrderAmountPromotionRule(ctx context.Context, fixedAmountPromotionId string) OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:             a,
		ctx:                    ctx,
		fixedAmountPromotionId: fixedAmountPromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETFixedAmountPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFixedAmountPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETFixedAmountPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_amount_promotions/{fixedAmountPromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedAmountPromotionId"+"}", url.PathEscape(parameterToString(r.fixedAmountPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                   context.Context
	ApiService            OrderAmountPromotionRulesApi
	fixedPricePromotionId string
}

func (r OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedPricePromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETFixedPricePromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the fixed price promotion

Retrieve the order amount promotion rule associated to the fixed price promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fixedPricePromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETFixedPricePromotionIdOrderAmountPromotionRule(ctx context.Context, fixedPricePromotionId string) OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETFixedPricePromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFixedPricePromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETFixedPricePromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterToString(r.fixedPricePromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          OrderAmountPromotionRulesApi
	freeGiftPromotionId string
}

func (r OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeGiftPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETFreeGiftPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the free gift promotion

Retrieve the order amount promotion rule associated to the free gift promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param freeGiftPromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETFreeGiftPromotionIdOrderAmountPromotionRule(ctx context.Context, freeGiftPromotionId string) OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		freeGiftPromotionId: freeGiftPromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETFreeGiftPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFreeGiftPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETFreeGiftPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_gift_promotions/{freeGiftPromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeGiftPromotionId"+"}", url.PathEscape(parameterToString(r.freeGiftPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                     context.Context
	ApiService              OrderAmountPromotionRulesApi
	freeShippingPromotionId string
}

func (r OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeShippingPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETFreeShippingPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the free shipping promotion

Retrieve the order amount promotion rule associated to the free shipping promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param freeShippingPromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETFreeShippingPromotionIdOrderAmountPromotionRule(ctx context.Context, freeShippingPromotionId string) OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:              a,
		ctx:                     ctx,
		freeShippingPromotionId: freeShippingPromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETFreeShippingPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETFreeShippingPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETFreeShippingPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_shipping_promotions/{freeShippingPromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeShippingPromotionId"+"}", url.PathEscape(parameterToString(r.freeShippingPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest struct {
	ctx        context.Context
	ApiService OrderAmountPromotionRulesApi
}

func (r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETOrderAmountPromotionRulesExecute(r)
}

/*
GETOrderAmountPromotionRules List all order amount promotion rules

List all order amount promotion rules

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETOrderAmountPromotionRules(ctx context.Context) OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest {
	return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETOrderAmountPromotionRulesExecute(r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETOrderAmountPromotionRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_amount_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest struct {
	ctx                        context.Context
	ApiService                 OrderAmountPromotionRulesApi
	orderAmountPromotionRuleId string
}

func (r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) Execute() (*OrderAmountPromotionRule, *http.Response, error) {
	return r.ApiService.GETOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r)
}

/*
GETOrderAmountPromotionRulesOrderAmountPromotionRuleId Retrieve an order amount promotion rule

Retrieve an order amount promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderAmountPromotionRuleId The resource's id
 @return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest {
	return OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		orderAmountPromotionRuleId: orderAmountPromotionRuleId,
	}
}

// Execute executes the request
//  @return OrderAmountPromotionRule
func (a *OrderAmountPromotionRulesApiService) GETOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiGETOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*OrderAmountPromotionRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrderAmountPromotionRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETOrderAmountPromotionRulesOrderAmountPromotionRuleId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_amount_promotion_rules/{orderAmountPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderAmountPromotionRuleId"+"}", url.PathEscape(parameterToString(r.orderAmountPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx                           context.Context
	ApiService                    OrderAmountPromotionRulesApi
	percentageDiscountPromotionId string
}

func (r OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPercentageDiscountPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETPercentageDiscountPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the percentage discount promotion

Retrieve the order amount promotion rule associated to the percentage discount promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param percentageDiscountPromotionId The resource's id
 @return OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETPercentageDiscountPromotionIdOrderAmountPromotionRule(ctx context.Context, percentageDiscountPromotionId string) OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:                    a,
		ctx:                           ctx,
		percentageDiscountPromotionId: percentageDiscountPromotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETPercentageDiscountPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETPercentageDiscountPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/percentage_discount_promotions/{percentageDiscountPromotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"percentageDiscountPromotionId"+"}", url.PathEscape(parameterToString(r.percentageDiscountPromotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest struct {
	ctx         context.Context
	ApiService  OrderAmountPromotionRulesApi
	promotionId string
}

func (r OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPromotionIdOrderAmountPromotionRuleExecute(r)
}

/*
GETPromotionIdOrderAmountPromotionRule Retrieve the order amount promotion rule associated to the promotion

Retrieve the order amount promotion rule associated to the promotion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param promotionId The resource's id
 @return OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest
*/
func (a *OrderAmountPromotionRulesApiService) GETPromotionIdOrderAmountPromotionRule(ctx context.Context, promotionId string) OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest {
	return OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest{
		ApiService:  a,
		ctx:         ctx,
		promotionId: promotionId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) GETPromotionIdOrderAmountPromotionRuleExecute(r OrderAmountPromotionRulesApiGETPromotionIdOrderAmountPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.GETPromotionIdOrderAmountPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotions/{promotionId}/order_amount_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionId"+"}", url.PathEscape(parameterToString(r.promotionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest struct {
	ctx                            context.Context
	ApiService                     OrderAmountPromotionRulesApi
	orderAmountPromotionRuleId     string
	orderAmountPromotionRuleUpdate *OrderAmountPromotionRuleUpdate
}

func (r OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) OrderAmountPromotionRuleUpdate(orderAmountPromotionRuleUpdate OrderAmountPromotionRuleUpdate) OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest {
	r.orderAmountPromotionRuleUpdate = &orderAmountPromotionRuleUpdate
	return r
}

func (r OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r)
}

/*
PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleId Update an order amount promotion rule

Update an order amount promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderAmountPromotionRuleId The resource's id
 @return OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest
*/
func (a *OrderAmountPromotionRulesApiService) PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleId(ctx context.Context, orderAmountPromotionRuleId string) OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest {
	return OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest{
		ApiService:                 a,
		ctx:                        ctx,
		orderAmountPromotionRuleId: orderAmountPromotionRuleId,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdExecute(r OrderAmountPromotionRulesApiPATCHOrderAmountPromotionRulesOrderAmountPromotionRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.PATCHOrderAmountPromotionRulesOrderAmountPromotionRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_amount_promotion_rules/{orderAmountPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderAmountPromotionRuleId"+"}", url.PathEscape(parameterToString(r.orderAmountPromotionRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderAmountPromotionRuleUpdate == nil {
		return nil, reportError("orderAmountPromotionRuleUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.orderAmountPromotionRuleUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest struct {
	ctx                            context.Context
	ApiService                     OrderAmountPromotionRulesApi
	orderAmountPromotionRuleCreate *OrderAmountPromotionRuleCreate
}

func (r OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest) OrderAmountPromotionRuleCreate(orderAmountPromotionRuleCreate OrderAmountPromotionRuleCreate) OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest {
	r.orderAmountPromotionRuleCreate = &orderAmountPromotionRuleCreate
	return r
}

func (r OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTOrderAmountPromotionRulesExecute(r)
}

/*
POSTOrderAmountPromotionRules Create an order amount promotion rule

Create an order amount promotion rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest
*/
func (a *OrderAmountPromotionRulesApiService) POSTOrderAmountPromotionRules(ctx context.Context) OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest {
	return OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *OrderAmountPromotionRulesApiService) POSTOrderAmountPromotionRulesExecute(r OrderAmountPromotionRulesApiPOSTOrderAmountPromotionRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderAmountPromotionRulesApiService.POSTOrderAmountPromotionRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_amount_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderAmountPromotionRuleCreate == nil {
		return nil, reportError("orderAmountPromotionRuleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.orderAmountPromotionRuleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
