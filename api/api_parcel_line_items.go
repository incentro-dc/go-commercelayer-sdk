/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type ParcelLineItemsApi interface {

	/*
		DELETEParcelLineItemsParcelLineItemId Delete a parcel line item

		Delete a parcel line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param parcelLineItemId The resource's id
		@return ApiDELETEParcelLineItemsParcelLineItemIdRequest
	*/
	DELETEParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiDELETEParcelLineItemsParcelLineItemIdRequest

	// DELETEParcelLineItemsParcelLineItemIdExecute executes the request
	DELETEParcelLineItemsParcelLineItemIdExecute(r ApiDELETEParcelLineItemsParcelLineItemIdRequest) (*http.Response, error)

	/*
		GETParcelIdParcelLineItems Retrieve the parcel line items associated to the parcel

		Retrieve the parcel line items associated to the parcel

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param parcelId The resource's id
		@return ApiGETParcelIdParcelLineItemsRequest
	*/
	GETParcelIdParcelLineItems(ctx context.Context, parcelId string) ApiGETParcelIdParcelLineItemsRequest

	// GETParcelIdParcelLineItemsExecute executes the request
	GETParcelIdParcelLineItemsExecute(r ApiGETParcelIdParcelLineItemsRequest) (*http.Response, error)

	/*
		GETParcelLineItems List all parcel line items

		List all parcel line items

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETParcelLineItemsRequest
	*/
	GETParcelLineItems(ctx context.Context) ApiGETParcelLineItemsRequest

	// GETParcelLineItemsExecute executes the request
	GETParcelLineItemsExecute(r ApiGETParcelLineItemsRequest) (*http.Response, error)

	/*
		GETParcelLineItemsParcelLineItemId Retrieve a parcel line item

		Retrieve a parcel line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param parcelLineItemId The resource's id
		@return ApiGETParcelLineItemsParcelLineItemIdRequest
	*/
	GETParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiGETParcelLineItemsParcelLineItemIdRequest

	// GETParcelLineItemsParcelLineItemIdExecute executes the request
	//  @return ParcelLineItem
	GETParcelLineItemsParcelLineItemIdExecute(r ApiGETParcelLineItemsParcelLineItemIdRequest) (*ParcelLineItem, *http.Response, error)

	/*
		PATCHParcelLineItemsParcelLineItemId Update a parcel line item

		Update a parcel line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param parcelLineItemId The resource's id
		@return ApiPATCHParcelLineItemsParcelLineItemIdRequest
	*/
	PATCHParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiPATCHParcelLineItemsParcelLineItemIdRequest

	// PATCHParcelLineItemsParcelLineItemIdExecute executes the request
	PATCHParcelLineItemsParcelLineItemIdExecute(r ApiPATCHParcelLineItemsParcelLineItemIdRequest) (*http.Response, error)

	/*
		POSTParcelLineItems Create a parcel line item

		Create a parcel line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTParcelLineItemsRequest
	*/
	POSTParcelLineItems(ctx context.Context) ApiPOSTParcelLineItemsRequest

	// POSTParcelLineItemsExecute executes the request
	POSTParcelLineItemsExecute(r ApiPOSTParcelLineItemsRequest) (*http.Response, error)
}

// ParcelLineItemsApiService ParcelLineItemsApi service
type ParcelLineItemsApiService service

type ApiDELETEParcelLineItemsParcelLineItemIdRequest struct {
	ctx              context.Context
	ApiService       ParcelLineItemsApi
	parcelLineItemId string
}

func (r ApiDELETEParcelLineItemsParcelLineItemIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEParcelLineItemsParcelLineItemIdExecute(r)
}

/*
DELETEParcelLineItemsParcelLineItemId Delete a parcel line item

Delete a parcel line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parcelLineItemId The resource's id
 @return ApiDELETEParcelLineItemsParcelLineItemIdRequest
*/
func (a *ParcelLineItemsApiService) DELETEParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiDELETEParcelLineItemsParcelLineItemIdRequest {
	return ApiDELETEParcelLineItemsParcelLineItemIdRequest{
		ApiService:       a,
		ctx:              ctx,
		parcelLineItemId: parcelLineItemId,
	}
}

// Execute executes the request
func (a *ParcelLineItemsApiService) DELETEParcelLineItemsParcelLineItemIdExecute(r ApiDELETEParcelLineItemsParcelLineItemIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.DELETEParcelLineItemsParcelLineItemId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcel_line_items/{parcelLineItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"parcelLineItemId"+"}", url.PathEscape(parameterToString(r.parcelLineItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETParcelIdParcelLineItemsRequest struct {
	ctx        context.Context
	ApiService ParcelLineItemsApi
	parcelId   string
}

func (r ApiGETParcelIdParcelLineItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETParcelIdParcelLineItemsExecute(r)
}

/*
GETParcelIdParcelLineItems Retrieve the parcel line items associated to the parcel

Retrieve the parcel line items associated to the parcel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parcelId The resource's id
 @return ApiGETParcelIdParcelLineItemsRequest
*/
func (a *ParcelLineItemsApiService) GETParcelIdParcelLineItems(ctx context.Context, parcelId string) ApiGETParcelIdParcelLineItemsRequest {
	return ApiGETParcelIdParcelLineItemsRequest{
		ApiService: a,
		ctx:        ctx,
		parcelId:   parcelId,
	}
}

// Execute executes the request
func (a *ParcelLineItemsApiService) GETParcelIdParcelLineItemsExecute(r ApiGETParcelIdParcelLineItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.GETParcelIdParcelLineItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcels/{parcelId}/parcel_line_items"
	localVarPath = strings.Replace(localVarPath, "{"+"parcelId"+"}", url.PathEscape(parameterToString(r.parcelId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETParcelLineItemsRequest struct {
	ctx        context.Context
	ApiService ParcelLineItemsApi
}

func (r ApiGETParcelLineItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETParcelLineItemsExecute(r)
}

/*
GETParcelLineItems List all parcel line items

List all parcel line items

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETParcelLineItemsRequest
*/
func (a *ParcelLineItemsApiService) GETParcelLineItems(ctx context.Context) ApiGETParcelLineItemsRequest {
	return ApiGETParcelLineItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ParcelLineItemsApiService) GETParcelLineItemsExecute(r ApiGETParcelLineItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.GETParcelLineItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcel_line_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETParcelLineItemsParcelLineItemIdRequest struct {
	ctx              context.Context
	ApiService       ParcelLineItemsApi
	parcelLineItemId string
}

func (r ApiGETParcelLineItemsParcelLineItemIdRequest) Execute() (*ParcelLineItem, *http.Response, error) {
	return r.ApiService.GETParcelLineItemsParcelLineItemIdExecute(r)
}

/*
GETParcelLineItemsParcelLineItemId Retrieve a parcel line item

Retrieve a parcel line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parcelLineItemId The resource's id
 @return ApiGETParcelLineItemsParcelLineItemIdRequest
*/
func (a *ParcelLineItemsApiService) GETParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiGETParcelLineItemsParcelLineItemIdRequest {
	return ApiGETParcelLineItemsParcelLineItemIdRequest{
		ApiService:       a,
		ctx:              ctx,
		parcelLineItemId: parcelLineItemId,
	}
}

// Execute executes the request
//  @return ParcelLineItem
func (a *ParcelLineItemsApiService) GETParcelLineItemsParcelLineItemIdExecute(r ApiGETParcelLineItemsParcelLineItemIdRequest) (*ParcelLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ParcelLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.GETParcelLineItemsParcelLineItemId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcel_line_items/{parcelLineItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"parcelLineItemId"+"}", url.PathEscape(parameterToString(r.parcelLineItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHParcelLineItemsParcelLineItemIdRequest struct {
	ctx                  context.Context
	ApiService           ParcelLineItemsApi
	parcelLineItemId     string
	parcelLineItemUpdate *ParcelLineItemUpdate
}

func (r ApiPATCHParcelLineItemsParcelLineItemIdRequest) ParcelLineItemUpdate(parcelLineItemUpdate ParcelLineItemUpdate) ApiPATCHParcelLineItemsParcelLineItemIdRequest {
	r.parcelLineItemUpdate = &parcelLineItemUpdate
	return r
}

func (r ApiPATCHParcelLineItemsParcelLineItemIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHParcelLineItemsParcelLineItemIdExecute(r)
}

/*
PATCHParcelLineItemsParcelLineItemId Update a parcel line item

Update a parcel line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parcelLineItemId The resource's id
 @return ApiPATCHParcelLineItemsParcelLineItemIdRequest
*/
func (a *ParcelLineItemsApiService) PATCHParcelLineItemsParcelLineItemId(ctx context.Context, parcelLineItemId string) ApiPATCHParcelLineItemsParcelLineItemIdRequest {
	return ApiPATCHParcelLineItemsParcelLineItemIdRequest{
		ApiService:       a,
		ctx:              ctx,
		parcelLineItemId: parcelLineItemId,
	}
}

// Execute executes the request
func (a *ParcelLineItemsApiService) PATCHParcelLineItemsParcelLineItemIdExecute(r ApiPATCHParcelLineItemsParcelLineItemIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.PATCHParcelLineItemsParcelLineItemId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcel_line_items/{parcelLineItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"parcelLineItemId"+"}", url.PathEscape(parameterToString(r.parcelLineItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parcelLineItemUpdate == nil {
		return nil, reportError("parcelLineItemUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parcelLineItemUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTParcelLineItemsRequest struct {
	ctx                  context.Context
	ApiService           ParcelLineItemsApi
	parcelLineItemCreate *ParcelLineItemCreate
}

func (r ApiPOSTParcelLineItemsRequest) ParcelLineItemCreate(parcelLineItemCreate ParcelLineItemCreate) ApiPOSTParcelLineItemsRequest {
	r.parcelLineItemCreate = &parcelLineItemCreate
	return r
}

func (r ApiPOSTParcelLineItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTParcelLineItemsExecute(r)
}

/*
POSTParcelLineItems Create a parcel line item

Create a parcel line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTParcelLineItemsRequest
*/
func (a *ParcelLineItemsApiService) POSTParcelLineItems(ctx context.Context) ApiPOSTParcelLineItemsRequest {
	return ApiPOSTParcelLineItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ParcelLineItemsApiService) POSTParcelLineItemsExecute(r ApiPOSTParcelLineItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ParcelLineItemsApiService.POSTParcelLineItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/parcel_line_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.parcelLineItemCreate == nil {
		return nil, reportError("parcelLineItemCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.parcelLineItemCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
