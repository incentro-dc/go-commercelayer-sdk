/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type StockItemsApi interface {

	/*
		DELETEStockItemsStockItemId Delete a stock item

		Delete a stock item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stockItemId The resource's id
		@return ApiDELETEStockItemsStockItemIdRequest
	*/
	DELETEStockItemsStockItemId(ctx context.Context, stockItemId string) ApiDELETEStockItemsStockItemIdRequest

	// DELETEStockItemsStockItemIdExecute executes the request
	DELETEStockItemsStockItemIdExecute(r ApiDELETEStockItemsStockItemIdRequest) (*http.Response, error)

	/*
		GETSkuIdStockItems Retrieve the stock items associated to the SKU

		Retrieve the stock items associated to the SKU

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param skuId The resource's id
		@return ApiGETSkuIdStockItemsRequest
	*/
	GETSkuIdStockItems(ctx context.Context, skuId string) ApiGETSkuIdStockItemsRequest

	// GETSkuIdStockItemsExecute executes the request
	GETSkuIdStockItemsExecute(r ApiGETSkuIdStockItemsRequest) (*http.Response, error)

	/*
		GETStockItems List all stock items

		List all stock items

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETStockItemsRequest
	*/
	GETStockItems(ctx context.Context) ApiGETStockItemsRequest

	// GETStockItemsExecute executes the request
	GETStockItemsExecute(r ApiGETStockItemsRequest) (*http.Response, error)

	/*
		GETStockItemsStockItemId Retrieve a stock item

		Retrieve a stock item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stockItemId The resource's id
		@return ApiGETStockItemsStockItemIdRequest
	*/
	GETStockItemsStockItemId(ctx context.Context, stockItemId string) ApiGETStockItemsStockItemIdRequest

	// GETStockItemsStockItemIdExecute executes the request
	//  @return StockItem
	GETStockItemsStockItemIdExecute(r ApiGETStockItemsStockItemIdRequest) (*StockItem, *http.Response, error)

	/*
		GETStockLineItemIdStockItem Retrieve the stock item associated to the stock line item

		Retrieve the stock item associated to the stock line item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stockLineItemId The resource's id
		@return ApiGETStockLineItemIdStockItemRequest
	*/
	GETStockLineItemIdStockItem(ctx context.Context, stockLineItemId string) ApiGETStockLineItemIdStockItemRequest

	// GETStockLineItemIdStockItemExecute executes the request
	GETStockLineItemIdStockItemExecute(r ApiGETStockLineItemIdStockItemRequest) (*http.Response, error)

	/*
		GETStockLocationIdStockItems Retrieve the stock items associated to the stock location

		Retrieve the stock items associated to the stock location

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stockLocationId The resource's id
		@return ApiGETStockLocationIdStockItemsRequest
	*/
	GETStockLocationIdStockItems(ctx context.Context, stockLocationId string) ApiGETStockLocationIdStockItemsRequest

	// GETStockLocationIdStockItemsExecute executes the request
	GETStockLocationIdStockItemsExecute(r ApiGETStockLocationIdStockItemsRequest) (*http.Response, error)

	/*
		PATCHStockItemsStockItemId Update a stock item

		Update a stock item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param stockItemId The resource's id
		@return ApiPATCHStockItemsStockItemIdRequest
	*/
	PATCHStockItemsStockItemId(ctx context.Context, stockItemId string) ApiPATCHStockItemsStockItemIdRequest

	// PATCHStockItemsStockItemIdExecute executes the request
	PATCHStockItemsStockItemIdExecute(r ApiPATCHStockItemsStockItemIdRequest) (*http.Response, error)

	/*
		POSTStockItems Create a stock item

		Create a stock item

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTStockItemsRequest
	*/
	POSTStockItems(ctx context.Context) ApiPOSTStockItemsRequest

	// POSTStockItemsExecute executes the request
	POSTStockItemsExecute(r ApiPOSTStockItemsRequest) (*http.Response, error)
}

// StockItemsApiService StockItemsApi service
type StockItemsApiService service

type ApiDELETEStockItemsStockItemIdRequest struct {
	ctx         context.Context
	ApiService  StockItemsApi
	stockItemId string
}

func (r ApiDELETEStockItemsStockItemIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEStockItemsStockItemIdExecute(r)
}

/*
DELETEStockItemsStockItemId Delete a stock item

Delete a stock item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stockItemId The resource's id
 @return ApiDELETEStockItemsStockItemIdRequest
*/
func (a *StockItemsApiService) DELETEStockItemsStockItemId(ctx context.Context, stockItemId string) ApiDELETEStockItemsStockItemIdRequest {
	return ApiDELETEStockItemsStockItemIdRequest{
		ApiService:  a,
		ctx:         ctx,
		stockItemId: stockItemId,
	}
}

// Execute executes the request
func (a *StockItemsApiService) DELETEStockItemsStockItemIdExecute(r ApiDELETEStockItemsStockItemIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.DELETEStockItemsStockItemId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_items/{stockItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stockItemId"+"}", url.PathEscape(parameterToString(r.stockItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETSkuIdStockItemsRequest struct {
	ctx        context.Context
	ApiService StockItemsApi
	skuId      string
}

func (r ApiGETSkuIdStockItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETSkuIdStockItemsExecute(r)
}

/*
GETSkuIdStockItems Retrieve the stock items associated to the SKU

Retrieve the stock items associated to the SKU

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param skuId The resource's id
 @return ApiGETSkuIdStockItemsRequest
*/
func (a *StockItemsApiService) GETSkuIdStockItems(ctx context.Context, skuId string) ApiGETSkuIdStockItemsRequest {
	return ApiGETSkuIdStockItemsRequest{
		ApiService: a,
		ctx:        ctx,
		skuId:      skuId,
	}
}

// Execute executes the request
func (a *StockItemsApiService) GETSkuIdStockItemsExecute(r ApiGETSkuIdStockItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.GETSkuIdStockItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/skus/{skuId}/stock_items"
	localVarPath = strings.Replace(localVarPath, "{"+"skuId"+"}", url.PathEscape(parameterToString(r.skuId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETStockItemsRequest struct {
	ctx        context.Context
	ApiService StockItemsApi
}

func (r ApiGETStockItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETStockItemsExecute(r)
}

/*
GETStockItems List all stock items

List all stock items

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETStockItemsRequest
*/
func (a *StockItemsApiService) GETStockItems(ctx context.Context) ApiGETStockItemsRequest {
	return ApiGETStockItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *StockItemsApiService) GETStockItemsExecute(r ApiGETStockItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.GETStockItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETStockItemsStockItemIdRequest struct {
	ctx         context.Context
	ApiService  StockItemsApi
	stockItemId string
}

func (r ApiGETStockItemsStockItemIdRequest) Execute() (*StockItem, *http.Response, error) {
	return r.ApiService.GETStockItemsStockItemIdExecute(r)
}

/*
GETStockItemsStockItemId Retrieve a stock item

Retrieve a stock item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stockItemId The resource's id
 @return ApiGETStockItemsStockItemIdRequest
*/
func (a *StockItemsApiService) GETStockItemsStockItemId(ctx context.Context, stockItemId string) ApiGETStockItemsStockItemIdRequest {
	return ApiGETStockItemsStockItemIdRequest{
		ApiService:  a,
		ctx:         ctx,
		stockItemId: stockItemId,
	}
}

// Execute executes the request
//  @return StockItem
func (a *StockItemsApiService) GETStockItemsStockItemIdExecute(r ApiGETStockItemsStockItemIdRequest) (*StockItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StockItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.GETStockItemsStockItemId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_items/{stockItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stockItemId"+"}", url.PathEscape(parameterToString(r.stockItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETStockLineItemIdStockItemRequest struct {
	ctx             context.Context
	ApiService      StockItemsApi
	stockLineItemId string
}

func (r ApiGETStockLineItemIdStockItemRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETStockLineItemIdStockItemExecute(r)
}

/*
GETStockLineItemIdStockItem Retrieve the stock item associated to the stock line item

Retrieve the stock item associated to the stock line item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stockLineItemId The resource's id
 @return ApiGETStockLineItemIdStockItemRequest
*/
func (a *StockItemsApiService) GETStockLineItemIdStockItem(ctx context.Context, stockLineItemId string) ApiGETStockLineItemIdStockItemRequest {
	return ApiGETStockLineItemIdStockItemRequest{
		ApiService:      a,
		ctx:             ctx,
		stockLineItemId: stockLineItemId,
	}
}

// Execute executes the request
func (a *StockItemsApiService) GETStockLineItemIdStockItemExecute(r ApiGETStockLineItemIdStockItemRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.GETStockLineItemIdStockItem")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_line_items/{stockLineItemId}/stock_item"
	localVarPath = strings.Replace(localVarPath, "{"+"stockLineItemId"+"}", url.PathEscape(parameterToString(r.stockLineItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETStockLocationIdStockItemsRequest struct {
	ctx             context.Context
	ApiService      StockItemsApi
	stockLocationId string
}

func (r ApiGETStockLocationIdStockItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETStockLocationIdStockItemsExecute(r)
}

/*
GETStockLocationIdStockItems Retrieve the stock items associated to the stock location

Retrieve the stock items associated to the stock location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stockLocationId The resource's id
 @return ApiGETStockLocationIdStockItemsRequest
*/
func (a *StockItemsApiService) GETStockLocationIdStockItems(ctx context.Context, stockLocationId string) ApiGETStockLocationIdStockItemsRequest {
	return ApiGETStockLocationIdStockItemsRequest{
		ApiService:      a,
		ctx:             ctx,
		stockLocationId: stockLocationId,
	}
}

// Execute executes the request
func (a *StockItemsApiService) GETStockLocationIdStockItemsExecute(r ApiGETStockLocationIdStockItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.GETStockLocationIdStockItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_locations/{stockLocationId}/stock_items"
	localVarPath = strings.Replace(localVarPath, "{"+"stockLocationId"+"}", url.PathEscape(parameterToString(r.stockLocationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPATCHStockItemsStockItemIdRequest struct {
	ctx             context.Context
	ApiService      StockItemsApi
	stockItemId     string
	stockItemUpdate *StockItemUpdate
}

func (r ApiPATCHStockItemsStockItemIdRequest) StockItemUpdate(stockItemUpdate StockItemUpdate) ApiPATCHStockItemsStockItemIdRequest {
	r.stockItemUpdate = &stockItemUpdate
	return r
}

func (r ApiPATCHStockItemsStockItemIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHStockItemsStockItemIdExecute(r)
}

/*
PATCHStockItemsStockItemId Update a stock item

Update a stock item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stockItemId The resource's id
 @return ApiPATCHStockItemsStockItemIdRequest
*/
func (a *StockItemsApiService) PATCHStockItemsStockItemId(ctx context.Context, stockItemId string) ApiPATCHStockItemsStockItemIdRequest {
	return ApiPATCHStockItemsStockItemIdRequest{
		ApiService:  a,
		ctx:         ctx,
		stockItemId: stockItemId,
	}
}

// Execute executes the request
func (a *StockItemsApiService) PATCHStockItemsStockItemIdExecute(r ApiPATCHStockItemsStockItemIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.PATCHStockItemsStockItemId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_items/{stockItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stockItemId"+"}", url.PathEscape(parameterToString(r.stockItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.stockItemUpdate == nil {
		return nil, reportError("stockItemUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.stockItemUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTStockItemsRequest struct {
	ctx             context.Context
	ApiService      StockItemsApi
	stockItemCreate *StockItemCreate
}

func (r ApiPOSTStockItemsRequest) StockItemCreate(stockItemCreate StockItemCreate) ApiPOSTStockItemsRequest {
	r.stockItemCreate = &stockItemCreate
	return r
}

func (r ApiPOSTStockItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTStockItemsExecute(r)
}

/*
POSTStockItems Create a stock item

Create a stock item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTStockItemsRequest
*/
func (a *StockItemsApiService) POSTStockItems(ctx context.Context) ApiPOSTStockItemsRequest {
	return ApiPOSTStockItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *StockItemsApiService) POSTStockItemsExecute(r ApiPOSTStockItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StockItemsApiService.POSTStockItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stock_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.stockItemCreate == nil {
		return nil, reportError("stockItemCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.stockItemCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
