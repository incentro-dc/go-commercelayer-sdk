/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type TaxCategoriesApi interface {

	/*
		DELETETaxCategoriesTaxCategoryId Delete a tax category

		Delete a tax category

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxCategoryId The resource's id
		@return ApiDELETETaxCategoriesTaxCategoryIdRequest
	*/
	DELETETaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiDELETETaxCategoriesTaxCategoryIdRequest

	// DELETETaxCategoriesTaxCategoryIdExecute executes the request
	DELETETaxCategoriesTaxCategoryIdExecute(r ApiDELETETaxCategoriesTaxCategoryIdRequest) (*http.Response, error)

	/*
		GETAvalaraAccountIdTaxCategories Retrieve the tax categories associated to the avalara account

		Retrieve the tax categories associated to the avalara account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param avalaraAccountId The resource's id
		@return ApiGETAvalaraAccountIdTaxCategoriesRequest
	*/
	GETAvalaraAccountIdTaxCategories(ctx context.Context, avalaraAccountId string) ApiGETAvalaraAccountIdTaxCategoriesRequest

	// GETAvalaraAccountIdTaxCategoriesExecute executes the request
	GETAvalaraAccountIdTaxCategoriesExecute(r ApiGETAvalaraAccountIdTaxCategoriesRequest) (*http.Response, error)

	/*
		GETExternalTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the external tax calculator

		Retrieve the tax categories associated to the external tax calculator

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param externalTaxCalculatorId The resource's id
		@return ApiGETExternalTaxCalculatorIdTaxCategoriesRequest
	*/
	GETExternalTaxCalculatorIdTaxCategories(ctx context.Context, externalTaxCalculatorId string) ApiGETExternalTaxCalculatorIdTaxCategoriesRequest

	// GETExternalTaxCalculatorIdTaxCategoriesExecute executes the request
	GETExternalTaxCalculatorIdTaxCategoriesExecute(r ApiGETExternalTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error)

	/*
		GETManualTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the manual tax calculator

		Retrieve the tax categories associated to the manual tax calculator

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param manualTaxCalculatorId The resource's id
		@return ApiGETManualTaxCalculatorIdTaxCategoriesRequest
	*/
	GETManualTaxCalculatorIdTaxCategories(ctx context.Context, manualTaxCalculatorId string) ApiGETManualTaxCalculatorIdTaxCategoriesRequest

	// GETManualTaxCalculatorIdTaxCategoriesExecute executes the request
	GETManualTaxCalculatorIdTaxCategoriesExecute(r ApiGETManualTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error)

	/*
		GETTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the tax calculator

		Retrieve the tax categories associated to the tax calculator

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxCalculatorId The resource's id
		@return ApiGETTaxCalculatorIdTaxCategoriesRequest
	*/
	GETTaxCalculatorIdTaxCategories(ctx context.Context, taxCalculatorId string) ApiGETTaxCalculatorIdTaxCategoriesRequest

	// GETTaxCalculatorIdTaxCategoriesExecute executes the request
	GETTaxCalculatorIdTaxCategoriesExecute(r ApiGETTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error)

	/*
		GETTaxCategories List all tax categories

		List all tax categories

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETTaxCategoriesRequest
	*/
	GETTaxCategories(ctx context.Context) ApiGETTaxCategoriesRequest

	// GETTaxCategoriesExecute executes the request
	GETTaxCategoriesExecute(r ApiGETTaxCategoriesRequest) (*http.Response, error)

	/*
		GETTaxCategoriesTaxCategoryId Retrieve a tax category

		Retrieve a tax category

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxCategoryId The resource's id
		@return ApiGETTaxCategoriesTaxCategoryIdRequest
	*/
	GETTaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiGETTaxCategoriesTaxCategoryIdRequest

	// GETTaxCategoriesTaxCategoryIdExecute executes the request
	//  @return TaxCategory
	GETTaxCategoriesTaxCategoryIdExecute(r ApiGETTaxCategoriesTaxCategoryIdRequest) (*TaxCategory, *http.Response, error)

	/*
		GETTaxjarAccountIdTaxCategories Retrieve the tax categories associated to the taxjar account

		Retrieve the tax categories associated to the taxjar account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxjarAccountId The resource's id
		@return ApiGETTaxjarAccountIdTaxCategoriesRequest
	*/
	GETTaxjarAccountIdTaxCategories(ctx context.Context, taxjarAccountId string) ApiGETTaxjarAccountIdTaxCategoriesRequest

	// GETTaxjarAccountIdTaxCategoriesExecute executes the request
	GETTaxjarAccountIdTaxCategoriesExecute(r ApiGETTaxjarAccountIdTaxCategoriesRequest) (*http.Response, error)

	/*
		PATCHTaxCategoriesTaxCategoryId Update a tax category

		Update a tax category

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxCategoryId The resource's id
		@return ApiPATCHTaxCategoriesTaxCategoryIdRequest
	*/
	PATCHTaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiPATCHTaxCategoriesTaxCategoryIdRequest

	// PATCHTaxCategoriesTaxCategoryIdExecute executes the request
	PATCHTaxCategoriesTaxCategoryIdExecute(r ApiPATCHTaxCategoriesTaxCategoryIdRequest) (*http.Response, error)

	/*
		POSTTaxCategories Create a tax category

		Create a tax category

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTTaxCategoriesRequest
	*/
	POSTTaxCategories(ctx context.Context) ApiPOSTTaxCategoriesRequest

	// POSTTaxCategoriesExecute executes the request
	POSTTaxCategoriesExecute(r ApiPOSTTaxCategoriesRequest) (*http.Response, error)
}

// TaxCategoriesApiService TaxCategoriesApi service
type TaxCategoriesApiService service

type ApiDELETETaxCategoriesTaxCategoryIdRequest struct {
	ctx           context.Context
	ApiService    TaxCategoriesApi
	taxCategoryId string
}

func (r ApiDELETETaxCategoriesTaxCategoryIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETETaxCategoriesTaxCategoryIdExecute(r)
}

/*
DELETETaxCategoriesTaxCategoryId Delete a tax category

Delete a tax category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxCategoryId The resource's id
 @return ApiDELETETaxCategoriesTaxCategoryIdRequest
*/
func (a *TaxCategoriesApiService) DELETETaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiDELETETaxCategoriesTaxCategoryIdRequest {
	return ApiDELETETaxCategoriesTaxCategoryIdRequest{
		ApiService:    a,
		ctx:           ctx,
		taxCategoryId: taxCategoryId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) DELETETaxCategoriesTaxCategoryIdExecute(r ApiDELETETaxCategoriesTaxCategoryIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.DELETETaxCategoriesTaxCategoryId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_categories/{taxCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCategoryId"+"}", url.PathEscape(parameterToString(r.taxCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETAvalaraAccountIdTaxCategoriesRequest struct {
	ctx              context.Context
	ApiService       TaxCategoriesApi
	avalaraAccountId string
}

func (r ApiGETAvalaraAccountIdTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETAvalaraAccountIdTaxCategoriesExecute(r)
}

/*
GETAvalaraAccountIdTaxCategories Retrieve the tax categories associated to the avalara account

Retrieve the tax categories associated to the avalara account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param avalaraAccountId The resource's id
 @return ApiGETAvalaraAccountIdTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETAvalaraAccountIdTaxCategories(ctx context.Context, avalaraAccountId string) ApiGETAvalaraAccountIdTaxCategoriesRequest {
	return ApiGETAvalaraAccountIdTaxCategoriesRequest{
		ApiService:       a,
		ctx:              ctx,
		avalaraAccountId: avalaraAccountId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETAvalaraAccountIdTaxCategoriesExecute(r ApiGETAvalaraAccountIdTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETAvalaraAccountIdTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avalara_accounts/{avalaraAccountId}/tax_categories"
	localVarPath = strings.Replace(localVarPath, "{"+"avalaraAccountId"+"}", url.PathEscape(parameterToString(r.avalaraAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETExternalTaxCalculatorIdTaxCategoriesRequest struct {
	ctx                     context.Context
	ApiService              TaxCategoriesApi
	externalTaxCalculatorId string
}

func (r ApiGETExternalTaxCalculatorIdTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETExternalTaxCalculatorIdTaxCategoriesExecute(r)
}

/*
GETExternalTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the external tax calculator

Retrieve the tax categories associated to the external tax calculator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalTaxCalculatorId The resource's id
 @return ApiGETExternalTaxCalculatorIdTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETExternalTaxCalculatorIdTaxCategories(ctx context.Context, externalTaxCalculatorId string) ApiGETExternalTaxCalculatorIdTaxCategoriesRequest {
	return ApiGETExternalTaxCalculatorIdTaxCategoriesRequest{
		ApiService:              a,
		ctx:                     ctx,
		externalTaxCalculatorId: externalTaxCalculatorId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETExternalTaxCalculatorIdTaxCategoriesExecute(r ApiGETExternalTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETExternalTaxCalculatorIdTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external_tax_calculators/{externalTaxCalculatorId}/tax_categories"
	localVarPath = strings.Replace(localVarPath, "{"+"externalTaxCalculatorId"+"}", url.PathEscape(parameterToString(r.externalTaxCalculatorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETManualTaxCalculatorIdTaxCategoriesRequest struct {
	ctx                   context.Context
	ApiService            TaxCategoriesApi
	manualTaxCalculatorId string
}

func (r ApiGETManualTaxCalculatorIdTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETManualTaxCalculatorIdTaxCategoriesExecute(r)
}

/*
GETManualTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the manual tax calculator

Retrieve the tax categories associated to the manual tax calculator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param manualTaxCalculatorId The resource's id
 @return ApiGETManualTaxCalculatorIdTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETManualTaxCalculatorIdTaxCategories(ctx context.Context, manualTaxCalculatorId string) ApiGETManualTaxCalculatorIdTaxCategoriesRequest {
	return ApiGETManualTaxCalculatorIdTaxCategoriesRequest{
		ApiService:            a,
		ctx:                   ctx,
		manualTaxCalculatorId: manualTaxCalculatorId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETManualTaxCalculatorIdTaxCategoriesExecute(r ApiGETManualTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETManualTaxCalculatorIdTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/manual_tax_calculators/{manualTaxCalculatorId}/tax_categories"
	localVarPath = strings.Replace(localVarPath, "{"+"manualTaxCalculatorId"+"}", url.PathEscape(parameterToString(r.manualTaxCalculatorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETTaxCalculatorIdTaxCategoriesRequest struct {
	ctx             context.Context
	ApiService      TaxCategoriesApi
	taxCalculatorId string
}

func (r ApiGETTaxCalculatorIdTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETTaxCalculatorIdTaxCategoriesExecute(r)
}

/*
GETTaxCalculatorIdTaxCategories Retrieve the tax categories associated to the tax calculator

Retrieve the tax categories associated to the tax calculator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxCalculatorId The resource's id
 @return ApiGETTaxCalculatorIdTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETTaxCalculatorIdTaxCategories(ctx context.Context, taxCalculatorId string) ApiGETTaxCalculatorIdTaxCategoriesRequest {
	return ApiGETTaxCalculatorIdTaxCategoriesRequest{
		ApiService:      a,
		ctx:             ctx,
		taxCalculatorId: taxCalculatorId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETTaxCalculatorIdTaxCategoriesExecute(r ApiGETTaxCalculatorIdTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETTaxCalculatorIdTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_calculators/{taxCalculatorId}/tax_categories"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCalculatorId"+"}", url.PathEscape(parameterToString(r.taxCalculatorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETTaxCategoriesRequest struct {
	ctx        context.Context
	ApiService TaxCategoriesApi
}

func (r ApiGETTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETTaxCategoriesExecute(r)
}

/*
GETTaxCategories List all tax categories

List all tax categories

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETTaxCategories(ctx context.Context) ApiGETTaxCategoriesRequest {
	return ApiGETTaxCategoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETTaxCategoriesExecute(r ApiGETTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETTaxCategoriesTaxCategoryIdRequest struct {
	ctx           context.Context
	ApiService    TaxCategoriesApi
	taxCategoryId string
}

func (r ApiGETTaxCategoriesTaxCategoryIdRequest) Execute() (*TaxCategory, *http.Response, error) {
	return r.ApiService.GETTaxCategoriesTaxCategoryIdExecute(r)
}

/*
GETTaxCategoriesTaxCategoryId Retrieve a tax category

Retrieve a tax category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxCategoryId The resource's id
 @return ApiGETTaxCategoriesTaxCategoryIdRequest
*/
func (a *TaxCategoriesApiService) GETTaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiGETTaxCategoriesTaxCategoryIdRequest {
	return ApiGETTaxCategoriesTaxCategoryIdRequest{
		ApiService:    a,
		ctx:           ctx,
		taxCategoryId: taxCategoryId,
	}
}

// Execute executes the request
//  @return TaxCategory
func (a *TaxCategoriesApiService) GETTaxCategoriesTaxCategoryIdExecute(r ApiGETTaxCategoriesTaxCategoryIdRequest) (*TaxCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETTaxCategoriesTaxCategoryId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_categories/{taxCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCategoryId"+"}", url.PathEscape(parameterToString(r.taxCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGETTaxjarAccountIdTaxCategoriesRequest struct {
	ctx             context.Context
	ApiService      TaxCategoriesApi
	taxjarAccountId string
}

func (r ApiGETTaxjarAccountIdTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETTaxjarAccountIdTaxCategoriesExecute(r)
}

/*
GETTaxjarAccountIdTaxCategories Retrieve the tax categories associated to the taxjar account

Retrieve the tax categories associated to the taxjar account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxjarAccountId The resource's id
 @return ApiGETTaxjarAccountIdTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) GETTaxjarAccountIdTaxCategories(ctx context.Context, taxjarAccountId string) ApiGETTaxjarAccountIdTaxCategoriesRequest {
	return ApiGETTaxjarAccountIdTaxCategoriesRequest{
		ApiService:      a,
		ctx:             ctx,
		taxjarAccountId: taxjarAccountId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) GETTaxjarAccountIdTaxCategoriesExecute(r ApiGETTaxjarAccountIdTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.GETTaxjarAccountIdTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/taxjar_accounts/{taxjarAccountId}/tax_categories"
	localVarPath = strings.Replace(localVarPath, "{"+"taxjarAccountId"+"}", url.PathEscape(parameterToString(r.taxjarAccountId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPATCHTaxCategoriesTaxCategoryIdRequest struct {
	ctx               context.Context
	ApiService        TaxCategoriesApi
	taxCategoryId     string
	taxCategoryUpdate *TaxCategoryUpdate
}

func (r ApiPATCHTaxCategoriesTaxCategoryIdRequest) TaxCategoryUpdate(taxCategoryUpdate TaxCategoryUpdate) ApiPATCHTaxCategoriesTaxCategoryIdRequest {
	r.taxCategoryUpdate = &taxCategoryUpdate
	return r
}

func (r ApiPATCHTaxCategoriesTaxCategoryIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHTaxCategoriesTaxCategoryIdExecute(r)
}

/*
PATCHTaxCategoriesTaxCategoryId Update a tax category

Update a tax category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxCategoryId The resource's id
 @return ApiPATCHTaxCategoriesTaxCategoryIdRequest
*/
func (a *TaxCategoriesApiService) PATCHTaxCategoriesTaxCategoryId(ctx context.Context, taxCategoryId string) ApiPATCHTaxCategoriesTaxCategoryIdRequest {
	return ApiPATCHTaxCategoriesTaxCategoryIdRequest{
		ApiService:    a,
		ctx:           ctx,
		taxCategoryId: taxCategoryId,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) PATCHTaxCategoriesTaxCategoryIdExecute(r ApiPATCHTaxCategoriesTaxCategoryIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.PATCHTaxCategoriesTaxCategoryId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_categories/{taxCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCategoryId"+"}", url.PathEscape(parameterToString(r.taxCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCategoryUpdate == nil {
		return nil, reportError("taxCategoryUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxCategoryUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTTaxCategoriesRequest struct {
	ctx               context.Context
	ApiService        TaxCategoriesApi
	taxCategoryCreate *TaxCategoryCreate
}

func (r ApiPOSTTaxCategoriesRequest) TaxCategoryCreate(taxCategoryCreate TaxCategoryCreate) ApiPOSTTaxCategoriesRequest {
	r.taxCategoryCreate = &taxCategoryCreate
	return r
}

func (r ApiPOSTTaxCategoriesRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTTaxCategoriesExecute(r)
}

/*
POSTTaxCategories Create a tax category

Create a tax category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTTaxCategoriesRequest
*/
func (a *TaxCategoriesApiService) POSTTaxCategories(ctx context.Context) ApiPOSTTaxCategoriesRequest {
	return ApiPOSTTaxCategoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *TaxCategoriesApiService) POSTTaxCategoriesExecute(r ApiPOSTTaxCategoriesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCategoriesApiService.POSTTaxCategories")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCategoryCreate == nil {
		return nil, reportError("taxCategoryCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxCategoryCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
