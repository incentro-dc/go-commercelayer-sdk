/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type TaxRulesApi interface {

	/*
		DELETETaxRulesTaxRuleId Delete a tax rule

		Delete a tax rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxRuleId The resource's id
		@return ApiDELETETaxRulesTaxRuleIdRequest
	*/
	DELETETaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiDELETETaxRulesTaxRuleIdRequest

	// DELETETaxRulesTaxRuleIdExecute executes the request
	DELETETaxRulesTaxRuleIdExecute(r ApiDELETETaxRulesTaxRuleIdRequest) (*http.Response, error)

	/*
		GETManualTaxCalculatorIdTaxRules Retrieve the tax rules associated to the manual tax calculator

		Retrieve the tax rules associated to the manual tax calculator

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param manualTaxCalculatorId The resource's id
		@return ApiGETManualTaxCalculatorIdTaxRulesRequest
	*/
	GETManualTaxCalculatorIdTaxRules(ctx context.Context, manualTaxCalculatorId string) ApiGETManualTaxCalculatorIdTaxRulesRequest

	// GETManualTaxCalculatorIdTaxRulesExecute executes the request
	GETManualTaxCalculatorIdTaxRulesExecute(r ApiGETManualTaxCalculatorIdTaxRulesRequest) (*http.Response, error)

	/*
		GETTaxRules List all tax rules

		List all tax rules

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGETTaxRulesRequest
	*/
	GETTaxRules(ctx context.Context) ApiGETTaxRulesRequest

	// GETTaxRulesExecute executes the request
	GETTaxRulesExecute(r ApiGETTaxRulesRequest) (*http.Response, error)

	/*
		GETTaxRulesTaxRuleId Retrieve a tax rule

		Retrieve a tax rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxRuleId The resource's id
		@return ApiGETTaxRulesTaxRuleIdRequest
	*/
	GETTaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiGETTaxRulesTaxRuleIdRequest

	// GETTaxRulesTaxRuleIdExecute executes the request
	//  @return TaxRule
	GETTaxRulesTaxRuleIdExecute(r ApiGETTaxRulesTaxRuleIdRequest) (*TaxRule, *http.Response, error)

	/*
		PATCHTaxRulesTaxRuleId Update a tax rule

		Update a tax rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param taxRuleId The resource's id
		@return ApiPATCHTaxRulesTaxRuleIdRequest
	*/
	PATCHTaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiPATCHTaxRulesTaxRuleIdRequest

	// PATCHTaxRulesTaxRuleIdExecute executes the request
	PATCHTaxRulesTaxRuleIdExecute(r ApiPATCHTaxRulesTaxRuleIdRequest) (*http.Response, error)

	/*
		POSTTaxRules Create a tax rule

		Create a tax rule

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiPOSTTaxRulesRequest
	*/
	POSTTaxRules(ctx context.Context) ApiPOSTTaxRulesRequest

	// POSTTaxRulesExecute executes the request
	POSTTaxRulesExecute(r ApiPOSTTaxRulesRequest) (*http.Response, error)
}

// TaxRulesApiService TaxRulesApi service
type TaxRulesApiService service

type ApiDELETETaxRulesTaxRuleIdRequest struct {
	ctx        context.Context
	ApiService TaxRulesApi
	taxRuleId  string
}

func (r ApiDELETETaxRulesTaxRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETETaxRulesTaxRuleIdExecute(r)
}

/*
DELETETaxRulesTaxRuleId Delete a tax rule

Delete a tax rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxRuleId The resource's id
 @return ApiDELETETaxRulesTaxRuleIdRequest
*/
func (a *TaxRulesApiService) DELETETaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiDELETETaxRulesTaxRuleIdRequest {
	return ApiDELETETaxRulesTaxRuleIdRequest{
		ApiService: a,
		ctx:        ctx,
		taxRuleId:  taxRuleId,
	}
}

// Execute executes the request
func (a *TaxRulesApiService) DELETETaxRulesTaxRuleIdExecute(r ApiDELETETaxRulesTaxRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.DELETETaxRulesTaxRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_rules/{taxRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxRuleId"+"}", url.PathEscape(parameterToString(r.taxRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETManualTaxCalculatorIdTaxRulesRequest struct {
	ctx                   context.Context
	ApiService            TaxRulesApi
	manualTaxCalculatorId string
}

func (r ApiGETManualTaxCalculatorIdTaxRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETManualTaxCalculatorIdTaxRulesExecute(r)
}

/*
GETManualTaxCalculatorIdTaxRules Retrieve the tax rules associated to the manual tax calculator

Retrieve the tax rules associated to the manual tax calculator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param manualTaxCalculatorId The resource's id
 @return ApiGETManualTaxCalculatorIdTaxRulesRequest
*/
func (a *TaxRulesApiService) GETManualTaxCalculatorIdTaxRules(ctx context.Context, manualTaxCalculatorId string) ApiGETManualTaxCalculatorIdTaxRulesRequest {
	return ApiGETManualTaxCalculatorIdTaxRulesRequest{
		ApiService:            a,
		ctx:                   ctx,
		manualTaxCalculatorId: manualTaxCalculatorId,
	}
}

// Execute executes the request
func (a *TaxRulesApiService) GETManualTaxCalculatorIdTaxRulesExecute(r ApiGETManualTaxCalculatorIdTaxRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.GETManualTaxCalculatorIdTaxRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/manual_tax_calculators/{manualTaxCalculatorId}/tax_rules"
	localVarPath = strings.Replace(localVarPath, "{"+"manualTaxCalculatorId"+"}", url.PathEscape(parameterToString(r.manualTaxCalculatorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETTaxRulesRequest struct {
	ctx        context.Context
	ApiService TaxRulesApi
}

func (r ApiGETTaxRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETTaxRulesExecute(r)
}

/*
GETTaxRules List all tax rules

List all tax rules

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGETTaxRulesRequest
*/
func (a *TaxRulesApiService) GETTaxRules(ctx context.Context) ApiGETTaxRulesRequest {
	return ApiGETTaxRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *TaxRulesApiService) GETTaxRulesExecute(r ApiGETTaxRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.GETTaxRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGETTaxRulesTaxRuleIdRequest struct {
	ctx        context.Context
	ApiService TaxRulesApi
	taxRuleId  string
}

func (r ApiGETTaxRulesTaxRuleIdRequest) Execute() (*TaxRule, *http.Response, error) {
	return r.ApiService.GETTaxRulesTaxRuleIdExecute(r)
}

/*
GETTaxRulesTaxRuleId Retrieve a tax rule

Retrieve a tax rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxRuleId The resource's id
 @return ApiGETTaxRulesTaxRuleIdRequest
*/
func (a *TaxRulesApiService) GETTaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiGETTaxRulesTaxRuleIdRequest {
	return ApiGETTaxRulesTaxRuleIdRequest{
		ApiService: a,
		ctx:        ctx,
		taxRuleId:  taxRuleId,
	}
}

// Execute executes the request
//  @return TaxRule
func (a *TaxRulesApiService) GETTaxRulesTaxRuleIdExecute(r ApiGETTaxRulesTaxRuleIdRequest) (*TaxRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.GETTaxRulesTaxRuleId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_rules/{taxRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxRuleId"+"}", url.PathEscape(parameterToString(r.taxRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPATCHTaxRulesTaxRuleIdRequest struct {
	ctx           context.Context
	ApiService    TaxRulesApi
	taxRuleId     string
	taxRuleUpdate *TaxRuleUpdate
}

func (r ApiPATCHTaxRulesTaxRuleIdRequest) TaxRuleUpdate(taxRuleUpdate TaxRuleUpdate) ApiPATCHTaxRulesTaxRuleIdRequest {
	r.taxRuleUpdate = &taxRuleUpdate
	return r
}

func (r ApiPATCHTaxRulesTaxRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.PATCHTaxRulesTaxRuleIdExecute(r)
}

/*
PATCHTaxRulesTaxRuleId Update a tax rule

Update a tax rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxRuleId The resource's id
 @return ApiPATCHTaxRulesTaxRuleIdRequest
*/
func (a *TaxRulesApiService) PATCHTaxRulesTaxRuleId(ctx context.Context, taxRuleId string) ApiPATCHTaxRulesTaxRuleIdRequest {
	return ApiPATCHTaxRulesTaxRuleIdRequest{
		ApiService: a,
		ctx:        ctx,
		taxRuleId:  taxRuleId,
	}
}

// Execute executes the request
func (a *TaxRulesApiService) PATCHTaxRulesTaxRuleIdExecute(r ApiPATCHTaxRulesTaxRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.PATCHTaxRulesTaxRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_rules/{taxRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxRuleId"+"}", url.PathEscape(parameterToString(r.taxRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxRuleUpdate == nil {
		return nil, reportError("taxRuleUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxRuleUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPOSTTaxRulesRequest struct {
	ctx           context.Context
	ApiService    TaxRulesApi
	taxRuleCreate *TaxRuleCreate
}

func (r ApiPOSTTaxRulesRequest) TaxRuleCreate(taxRuleCreate TaxRuleCreate) ApiPOSTTaxRulesRequest {
	r.taxRuleCreate = &taxRuleCreate
	return r
}

func (r ApiPOSTTaxRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.POSTTaxRulesExecute(r)
}

/*
POSTTaxRules Create a tax rule

Create a tax rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPOSTTaxRulesRequest
*/
func (a *TaxRulesApiService) POSTTaxRules(ctx context.Context) ApiPOSTTaxRulesRequest {
	return ApiPOSTTaxRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *TaxRulesApiService) POSTTaxRulesExecute(r ApiPOSTTaxRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxRulesApiService.POSTTaxRules")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tax_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxRuleCreate == nil {
		return nil, reportError("taxRuleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxRuleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
