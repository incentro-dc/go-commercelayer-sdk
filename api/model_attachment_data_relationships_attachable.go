/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.9.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AttachmentDataRelationshipsAttachable - struct for AttachmentDataRelationshipsAttachable
type AttachmentDataRelationshipsAttachable struct {
	BillingInfoValidationRule *BillingInfoValidationRule
	Bundle                    *Bundle
	CarrierAccount            *CarrierAccount
	Customer                  *Customer
	CustomerGroup             *CustomerGroup
	DeliveryLeadTime          *DeliveryLeadTime
	Geocoder                  *Geocoder
	GiftCard                  *GiftCard
	GiftCardRecipient         *GiftCardRecipient
	InventoryModel            *InventoryModel
	Market                    *Market
	Merchant                  *Merchant
	ModelPackage              *ModelPackage
	ModelReturn               *ModelReturn
	Order                     *Order
	Parcel                    *Parcel
	PaymentMethod             *PaymentMethod
	Price                     *Price
	PriceList                 *PriceList
	Promotion                 *Promotion
	Shipment                  *Shipment
	ShippingCategory          *ShippingCategory
	ShippingMethod            *ShippingMethod
	ShippingZone              *ShippingZone
	Sku                       *Sku
	SkuOption                 *SkuOption
	StockItem                 *StockItem
	StockLocation             *StockLocation
	TaxCalculator             *TaxCalculator
	TaxCategory               *TaxCategory
}

// BillingInfoValidationRuleAsAttachmentDataRelationshipsAttachable is a convenience function that returns BillingInfoValidationRule wrapped in AttachmentDataRelationshipsAttachable
func BillingInfoValidationRuleAsAttachmentDataRelationshipsAttachable(v *BillingInfoValidationRule) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		BillingInfoValidationRule: v,
	}
}

// BundleAsAttachmentDataRelationshipsAttachable is a convenience function that returns Bundle wrapped in AttachmentDataRelationshipsAttachable
func BundleAsAttachmentDataRelationshipsAttachable(v *Bundle) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Bundle: v,
	}
}

// CarrierAccountAsAttachmentDataRelationshipsAttachable is a convenience function that returns CarrierAccount wrapped in AttachmentDataRelationshipsAttachable
func CarrierAccountAsAttachmentDataRelationshipsAttachable(v *CarrierAccount) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		CarrierAccount: v,
	}
}

// CustomerAsAttachmentDataRelationshipsAttachable is a convenience function that returns Customer wrapped in AttachmentDataRelationshipsAttachable
func CustomerAsAttachmentDataRelationshipsAttachable(v *Customer) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Customer: v,
	}
}

// CustomerGroupAsAttachmentDataRelationshipsAttachable is a convenience function that returns CustomerGroup wrapped in AttachmentDataRelationshipsAttachable
func CustomerGroupAsAttachmentDataRelationshipsAttachable(v *CustomerGroup) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		CustomerGroup: v,
	}
}

// DeliveryLeadTimeAsAttachmentDataRelationshipsAttachable is a convenience function that returns DeliveryLeadTime wrapped in AttachmentDataRelationshipsAttachable
func DeliveryLeadTimeAsAttachmentDataRelationshipsAttachable(v *DeliveryLeadTime) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		DeliveryLeadTime: v,
	}
}

// GeocoderAsAttachmentDataRelationshipsAttachable is a convenience function that returns Geocoder wrapped in AttachmentDataRelationshipsAttachable
func GeocoderAsAttachmentDataRelationshipsAttachable(v *Geocoder) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Geocoder: v,
	}
}

// GiftCardAsAttachmentDataRelationshipsAttachable is a convenience function that returns GiftCard wrapped in AttachmentDataRelationshipsAttachable
func GiftCardAsAttachmentDataRelationshipsAttachable(v *GiftCard) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		GiftCard: v,
	}
}

// GiftCardRecipientAsAttachmentDataRelationshipsAttachable is a convenience function that returns GiftCardRecipient wrapped in AttachmentDataRelationshipsAttachable
func GiftCardRecipientAsAttachmentDataRelationshipsAttachable(v *GiftCardRecipient) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		GiftCardRecipient: v,
	}
}

// InventoryModelAsAttachmentDataRelationshipsAttachable is a convenience function that returns InventoryModel wrapped in AttachmentDataRelationshipsAttachable
func InventoryModelAsAttachmentDataRelationshipsAttachable(v *InventoryModel) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		InventoryModel: v,
	}
}

// MarketAsAttachmentDataRelationshipsAttachable is a convenience function that returns Market wrapped in AttachmentDataRelationshipsAttachable
func MarketAsAttachmentDataRelationshipsAttachable(v *Market) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Market: v,
	}
}

// MerchantAsAttachmentDataRelationshipsAttachable is a convenience function that returns Merchant wrapped in AttachmentDataRelationshipsAttachable
func MerchantAsAttachmentDataRelationshipsAttachable(v *Merchant) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Merchant: v,
	}
}

// ModelPackageAsAttachmentDataRelationshipsAttachable is a convenience function that returns ModelPackage wrapped in AttachmentDataRelationshipsAttachable
func ModelPackageAsAttachmentDataRelationshipsAttachable(v *ModelPackage) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		ModelPackage: v,
	}
}

// ModelReturnAsAttachmentDataRelationshipsAttachable is a convenience function that returns ModelReturn wrapped in AttachmentDataRelationshipsAttachable
func ModelReturnAsAttachmentDataRelationshipsAttachable(v *ModelReturn) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		ModelReturn: v,
	}
}

// OrderAsAttachmentDataRelationshipsAttachable is a convenience function that returns Order wrapped in AttachmentDataRelationshipsAttachable
func OrderAsAttachmentDataRelationshipsAttachable(v *Order) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Order: v,
	}
}

// ParcelAsAttachmentDataRelationshipsAttachable is a convenience function that returns Parcel wrapped in AttachmentDataRelationshipsAttachable
func ParcelAsAttachmentDataRelationshipsAttachable(v *Parcel) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Parcel: v,
	}
}

// PaymentMethodAsAttachmentDataRelationshipsAttachable is a convenience function that returns PaymentMethod wrapped in AttachmentDataRelationshipsAttachable
func PaymentMethodAsAttachmentDataRelationshipsAttachable(v *PaymentMethod) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		PaymentMethod: v,
	}
}

// PriceAsAttachmentDataRelationshipsAttachable is a convenience function that returns Price wrapped in AttachmentDataRelationshipsAttachable
func PriceAsAttachmentDataRelationshipsAttachable(v *Price) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Price: v,
	}
}

// PriceListAsAttachmentDataRelationshipsAttachable is a convenience function that returns PriceList wrapped in AttachmentDataRelationshipsAttachable
func PriceListAsAttachmentDataRelationshipsAttachable(v *PriceList) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		PriceList: v,
	}
}

// PromotionAsAttachmentDataRelationshipsAttachable is a convenience function that returns Promotion wrapped in AttachmentDataRelationshipsAttachable
func PromotionAsAttachmentDataRelationshipsAttachable(v *Promotion) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Promotion: v,
	}
}

// ShipmentAsAttachmentDataRelationshipsAttachable is a convenience function that returns Shipment wrapped in AttachmentDataRelationshipsAttachable
func ShipmentAsAttachmentDataRelationshipsAttachable(v *Shipment) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Shipment: v,
	}
}

// ShippingCategoryAsAttachmentDataRelationshipsAttachable is a convenience function that returns ShippingCategory wrapped in AttachmentDataRelationshipsAttachable
func ShippingCategoryAsAttachmentDataRelationshipsAttachable(v *ShippingCategory) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		ShippingCategory: v,
	}
}

// ShippingMethodAsAttachmentDataRelationshipsAttachable is a convenience function that returns ShippingMethod wrapped in AttachmentDataRelationshipsAttachable
func ShippingMethodAsAttachmentDataRelationshipsAttachable(v *ShippingMethod) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		ShippingMethod: v,
	}
}

// ShippingZoneAsAttachmentDataRelationshipsAttachable is a convenience function that returns ShippingZone wrapped in AttachmentDataRelationshipsAttachable
func ShippingZoneAsAttachmentDataRelationshipsAttachable(v *ShippingZone) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		ShippingZone: v,
	}
}

// SkuAsAttachmentDataRelationshipsAttachable is a convenience function that returns Sku wrapped in AttachmentDataRelationshipsAttachable
func SkuAsAttachmentDataRelationshipsAttachable(v *Sku) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		Sku: v,
	}
}

// SkuOptionAsAttachmentDataRelationshipsAttachable is a convenience function that returns SkuOption wrapped in AttachmentDataRelationshipsAttachable
func SkuOptionAsAttachmentDataRelationshipsAttachable(v *SkuOption) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		SkuOption: v,
	}
}

// StockItemAsAttachmentDataRelationshipsAttachable is a convenience function that returns StockItem wrapped in AttachmentDataRelationshipsAttachable
func StockItemAsAttachmentDataRelationshipsAttachable(v *StockItem) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		StockItem: v,
	}
}

// StockLocationAsAttachmentDataRelationshipsAttachable is a convenience function that returns StockLocation wrapped in AttachmentDataRelationshipsAttachable
func StockLocationAsAttachmentDataRelationshipsAttachable(v *StockLocation) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		StockLocation: v,
	}
}

// TaxCalculatorAsAttachmentDataRelationshipsAttachable is a convenience function that returns TaxCalculator wrapped in AttachmentDataRelationshipsAttachable
func TaxCalculatorAsAttachmentDataRelationshipsAttachable(v *TaxCalculator) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		TaxCalculator: v,
	}
}

// TaxCategoryAsAttachmentDataRelationshipsAttachable is a convenience function that returns TaxCategory wrapped in AttachmentDataRelationshipsAttachable
func TaxCategoryAsAttachmentDataRelationshipsAttachable(v *TaxCategory) AttachmentDataRelationshipsAttachable {
	return AttachmentDataRelationshipsAttachable{
		TaxCategory: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AttachmentDataRelationshipsAttachable) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BillingInfoValidationRule
	err = newStrictDecoder(data).Decode(&dst.BillingInfoValidationRule)
	if err == nil {
		jsonBillingInfoValidationRule, _ := json.Marshal(dst.BillingInfoValidationRule)
		if string(jsonBillingInfoValidationRule) == "{}" { // empty struct
			dst.BillingInfoValidationRule = nil
		} else {
			match++
		}
	} else {
		dst.BillingInfoValidationRule = nil
	}

	// try to unmarshal data into Bundle
	err = newStrictDecoder(data).Decode(&dst.Bundle)
	if err == nil {
		jsonBundle, _ := json.Marshal(dst.Bundle)
		if string(jsonBundle) == "{}" { // empty struct
			dst.Bundle = nil
		} else {
			match++
		}
	} else {
		dst.Bundle = nil
	}

	// try to unmarshal data into CarrierAccount
	err = newStrictDecoder(data).Decode(&dst.CarrierAccount)
	if err == nil {
		jsonCarrierAccount, _ := json.Marshal(dst.CarrierAccount)
		if string(jsonCarrierAccount) == "{}" { // empty struct
			dst.CarrierAccount = nil
		} else {
			match++
		}
	} else {
		dst.CarrierAccount = nil
	}

	// try to unmarshal data into Customer
	err = newStrictDecoder(data).Decode(&dst.Customer)
	if err == nil {
		jsonCustomer, _ := json.Marshal(dst.Customer)
		if string(jsonCustomer) == "{}" { // empty struct
			dst.Customer = nil
		} else {
			match++
		}
	} else {
		dst.Customer = nil
	}

	// try to unmarshal data into CustomerGroup
	err = newStrictDecoder(data).Decode(&dst.CustomerGroup)
	if err == nil {
		jsonCustomerGroup, _ := json.Marshal(dst.CustomerGroup)
		if string(jsonCustomerGroup) == "{}" { // empty struct
			dst.CustomerGroup = nil
		} else {
			match++
		}
	} else {
		dst.CustomerGroup = nil
	}

	// try to unmarshal data into DeliveryLeadTime
	err = newStrictDecoder(data).Decode(&dst.DeliveryLeadTime)
	if err == nil {
		jsonDeliveryLeadTime, _ := json.Marshal(dst.DeliveryLeadTime)
		if string(jsonDeliveryLeadTime) == "{}" { // empty struct
			dst.DeliveryLeadTime = nil
		} else {
			match++
		}
	} else {
		dst.DeliveryLeadTime = nil
	}

	// try to unmarshal data into Geocoder
	err = newStrictDecoder(data).Decode(&dst.Geocoder)
	if err == nil {
		jsonGeocoder, _ := json.Marshal(dst.Geocoder)
		if string(jsonGeocoder) == "{}" { // empty struct
			dst.Geocoder = nil
		} else {
			match++
		}
	} else {
		dst.Geocoder = nil
	}

	// try to unmarshal data into GiftCard
	err = newStrictDecoder(data).Decode(&dst.GiftCard)
	if err == nil {
		jsonGiftCard, _ := json.Marshal(dst.GiftCard)
		if string(jsonGiftCard) == "{}" { // empty struct
			dst.GiftCard = nil
		} else {
			match++
		}
	} else {
		dst.GiftCard = nil
	}

	// try to unmarshal data into GiftCardRecipient
	err = newStrictDecoder(data).Decode(&dst.GiftCardRecipient)
	if err == nil {
		jsonGiftCardRecipient, _ := json.Marshal(dst.GiftCardRecipient)
		if string(jsonGiftCardRecipient) == "{}" { // empty struct
			dst.GiftCardRecipient = nil
		} else {
			match++
		}
	} else {
		dst.GiftCardRecipient = nil
	}

	// try to unmarshal data into InventoryModel
	err = newStrictDecoder(data).Decode(&dst.InventoryModel)
	if err == nil {
		jsonInventoryModel, _ := json.Marshal(dst.InventoryModel)
		if string(jsonInventoryModel) == "{}" { // empty struct
			dst.InventoryModel = nil
		} else {
			match++
		}
	} else {
		dst.InventoryModel = nil
	}

	// try to unmarshal data into Market
	err = newStrictDecoder(data).Decode(&dst.Market)
	if err == nil {
		jsonMarket, _ := json.Marshal(dst.Market)
		if string(jsonMarket) == "{}" { // empty struct
			dst.Market = nil
		} else {
			match++
		}
	} else {
		dst.Market = nil
	}

	// try to unmarshal data into Merchant
	err = newStrictDecoder(data).Decode(&dst.Merchant)
	if err == nil {
		jsonMerchant, _ := json.Marshal(dst.Merchant)
		if string(jsonMerchant) == "{}" { // empty struct
			dst.Merchant = nil
		} else {
			match++
		}
	} else {
		dst.Merchant = nil
	}

	// try to unmarshal data into ModelPackage
	err = newStrictDecoder(data).Decode(&dst.ModelPackage)
	if err == nil {
		jsonModelPackage, _ := json.Marshal(dst.ModelPackage)
		if string(jsonModelPackage) == "{}" { // empty struct
			dst.ModelPackage = nil
		} else {
			match++
		}
	} else {
		dst.ModelPackage = nil
	}

	// try to unmarshal data into ModelReturn
	err = newStrictDecoder(data).Decode(&dst.ModelReturn)
	if err == nil {
		jsonModelReturn, _ := json.Marshal(dst.ModelReturn)
		if string(jsonModelReturn) == "{}" { // empty struct
			dst.ModelReturn = nil
		} else {
			match++
		}
	} else {
		dst.ModelReturn = nil
	}

	// try to unmarshal data into Order
	err = newStrictDecoder(data).Decode(&dst.Order)
	if err == nil {
		jsonOrder, _ := json.Marshal(dst.Order)
		if string(jsonOrder) == "{}" { // empty struct
			dst.Order = nil
		} else {
			match++
		}
	} else {
		dst.Order = nil
	}

	// try to unmarshal data into Parcel
	err = newStrictDecoder(data).Decode(&dst.Parcel)
	if err == nil {
		jsonParcel, _ := json.Marshal(dst.Parcel)
		if string(jsonParcel) == "{}" { // empty struct
			dst.Parcel = nil
		} else {
			match++
		}
	} else {
		dst.Parcel = nil
	}

	// try to unmarshal data into PaymentMethod
	err = newStrictDecoder(data).Decode(&dst.PaymentMethod)
	if err == nil {
		jsonPaymentMethod, _ := json.Marshal(dst.PaymentMethod)
		if string(jsonPaymentMethod) == "{}" { // empty struct
			dst.PaymentMethod = nil
		} else {
			match++
		}
	} else {
		dst.PaymentMethod = nil
	}

	// try to unmarshal data into Price
	err = newStrictDecoder(data).Decode(&dst.Price)
	if err == nil {
		jsonPrice, _ := json.Marshal(dst.Price)
		if string(jsonPrice) == "{}" { // empty struct
			dst.Price = nil
		} else {
			match++
		}
	} else {
		dst.Price = nil
	}

	// try to unmarshal data into PriceList
	err = newStrictDecoder(data).Decode(&dst.PriceList)
	if err == nil {
		jsonPriceList, _ := json.Marshal(dst.PriceList)
		if string(jsonPriceList) == "{}" { // empty struct
			dst.PriceList = nil
		} else {
			match++
		}
	} else {
		dst.PriceList = nil
	}

	// try to unmarshal data into Promotion
	err = newStrictDecoder(data).Decode(&dst.Promotion)
	if err == nil {
		jsonPromotion, _ := json.Marshal(dst.Promotion)
		if string(jsonPromotion) == "{}" { // empty struct
			dst.Promotion = nil
		} else {
			match++
		}
	} else {
		dst.Promotion = nil
	}

	// try to unmarshal data into Shipment
	err = newStrictDecoder(data).Decode(&dst.Shipment)
	if err == nil {
		jsonShipment, _ := json.Marshal(dst.Shipment)
		if string(jsonShipment) == "{}" { // empty struct
			dst.Shipment = nil
		} else {
			match++
		}
	} else {
		dst.Shipment = nil
	}

	// try to unmarshal data into ShippingCategory
	err = newStrictDecoder(data).Decode(&dst.ShippingCategory)
	if err == nil {
		jsonShippingCategory, _ := json.Marshal(dst.ShippingCategory)
		if string(jsonShippingCategory) == "{}" { // empty struct
			dst.ShippingCategory = nil
		} else {
			match++
		}
	} else {
		dst.ShippingCategory = nil
	}

	// try to unmarshal data into ShippingMethod
	err = newStrictDecoder(data).Decode(&dst.ShippingMethod)
	if err == nil {
		jsonShippingMethod, _ := json.Marshal(dst.ShippingMethod)
		if string(jsonShippingMethod) == "{}" { // empty struct
			dst.ShippingMethod = nil
		} else {
			match++
		}
	} else {
		dst.ShippingMethod = nil
	}

	// try to unmarshal data into ShippingZone
	err = newStrictDecoder(data).Decode(&dst.ShippingZone)
	if err == nil {
		jsonShippingZone, _ := json.Marshal(dst.ShippingZone)
		if string(jsonShippingZone) == "{}" { // empty struct
			dst.ShippingZone = nil
		} else {
			match++
		}
	} else {
		dst.ShippingZone = nil
	}

	// try to unmarshal data into Sku
	err = newStrictDecoder(data).Decode(&dst.Sku)
	if err == nil {
		jsonSku, _ := json.Marshal(dst.Sku)
		if string(jsonSku) == "{}" { // empty struct
			dst.Sku = nil
		} else {
			match++
		}
	} else {
		dst.Sku = nil
	}

	// try to unmarshal data into SkuOption
	err = newStrictDecoder(data).Decode(&dst.SkuOption)
	if err == nil {
		jsonSkuOption, _ := json.Marshal(dst.SkuOption)
		if string(jsonSkuOption) == "{}" { // empty struct
			dst.SkuOption = nil
		} else {
			match++
		}
	} else {
		dst.SkuOption = nil
	}

	// try to unmarshal data into StockItem
	err = newStrictDecoder(data).Decode(&dst.StockItem)
	if err == nil {
		jsonStockItem, _ := json.Marshal(dst.StockItem)
		if string(jsonStockItem) == "{}" { // empty struct
			dst.StockItem = nil
		} else {
			match++
		}
	} else {
		dst.StockItem = nil
	}

	// try to unmarshal data into StockLocation
	err = newStrictDecoder(data).Decode(&dst.StockLocation)
	if err == nil {
		jsonStockLocation, _ := json.Marshal(dst.StockLocation)
		if string(jsonStockLocation) == "{}" { // empty struct
			dst.StockLocation = nil
		} else {
			match++
		}
	} else {
		dst.StockLocation = nil
	}

	// try to unmarshal data into TaxCalculator
	err = newStrictDecoder(data).Decode(&dst.TaxCalculator)
	if err == nil {
		jsonTaxCalculator, _ := json.Marshal(dst.TaxCalculator)
		if string(jsonTaxCalculator) == "{}" { // empty struct
			dst.TaxCalculator = nil
		} else {
			match++
		}
	} else {
		dst.TaxCalculator = nil
	}

	// try to unmarshal data into TaxCategory
	err = newStrictDecoder(data).Decode(&dst.TaxCategory)
	if err == nil {
		jsonTaxCategory, _ := json.Marshal(dst.TaxCategory)
		if string(jsonTaxCategory) == "{}" { // empty struct
			dst.TaxCategory = nil
		} else {
			match++
		}
	} else {
		dst.TaxCategory = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BillingInfoValidationRule = nil
		dst.Bundle = nil
		dst.CarrierAccount = nil
		dst.Customer = nil
		dst.CustomerGroup = nil
		dst.DeliveryLeadTime = nil
		dst.Geocoder = nil
		dst.GiftCard = nil
		dst.GiftCardRecipient = nil
		dst.InventoryModel = nil
		dst.Market = nil
		dst.Merchant = nil
		dst.ModelPackage = nil
		dst.ModelReturn = nil
		dst.Order = nil
		dst.Parcel = nil
		dst.PaymentMethod = nil
		dst.Price = nil
		dst.PriceList = nil
		dst.Promotion = nil
		dst.Shipment = nil
		dst.ShippingCategory = nil
		dst.ShippingMethod = nil
		dst.ShippingZone = nil
		dst.Sku = nil
		dst.SkuOption = nil
		dst.StockItem = nil
		dst.StockLocation = nil
		dst.TaxCalculator = nil
		dst.TaxCategory = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AttachmentDataRelationshipsAttachable)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AttachmentDataRelationshipsAttachable)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AttachmentDataRelationshipsAttachable) MarshalJSON() ([]byte, error) {
	if src.BillingInfoValidationRule != nil {
		return json.Marshal(&src.BillingInfoValidationRule)
	}

	if src.Bundle != nil {
		return json.Marshal(&src.Bundle)
	}

	if src.CarrierAccount != nil {
		return json.Marshal(&src.CarrierAccount)
	}

	if src.Customer != nil {
		return json.Marshal(&src.Customer)
	}

	if src.CustomerGroup != nil {
		return json.Marshal(&src.CustomerGroup)
	}

	if src.DeliveryLeadTime != nil {
		return json.Marshal(&src.DeliveryLeadTime)
	}

	if src.Geocoder != nil {
		return json.Marshal(&src.Geocoder)
	}

	if src.GiftCard != nil {
		return json.Marshal(&src.GiftCard)
	}

	if src.GiftCardRecipient != nil {
		return json.Marshal(&src.GiftCardRecipient)
	}

	if src.InventoryModel != nil {
		return json.Marshal(&src.InventoryModel)
	}

	if src.Market != nil {
		return json.Marshal(&src.Market)
	}

	if src.Merchant != nil {
		return json.Marshal(&src.Merchant)
	}

	if src.ModelPackage != nil {
		return json.Marshal(&src.ModelPackage)
	}

	if src.ModelReturn != nil {
		return json.Marshal(&src.ModelReturn)
	}

	if src.Order != nil {
		return json.Marshal(&src.Order)
	}

	if src.Parcel != nil {
		return json.Marshal(&src.Parcel)
	}

	if src.PaymentMethod != nil {
		return json.Marshal(&src.PaymentMethod)
	}

	if src.Price != nil {
		return json.Marshal(&src.Price)
	}

	if src.PriceList != nil {
		return json.Marshal(&src.PriceList)
	}

	if src.Promotion != nil {
		return json.Marshal(&src.Promotion)
	}

	if src.Shipment != nil {
		return json.Marshal(&src.Shipment)
	}

	if src.ShippingCategory != nil {
		return json.Marshal(&src.ShippingCategory)
	}

	if src.ShippingMethod != nil {
		return json.Marshal(&src.ShippingMethod)
	}

	if src.ShippingZone != nil {
		return json.Marshal(&src.ShippingZone)
	}

	if src.Sku != nil {
		return json.Marshal(&src.Sku)
	}

	if src.SkuOption != nil {
		return json.Marshal(&src.SkuOption)
	}

	if src.StockItem != nil {
		return json.Marshal(&src.StockItem)
	}

	if src.StockLocation != nil {
		return json.Marshal(&src.StockLocation)
	}

	if src.TaxCalculator != nil {
		return json.Marshal(&src.TaxCalculator)
	}

	if src.TaxCategory != nil {
		return json.Marshal(&src.TaxCategory)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AttachmentDataRelationshipsAttachable) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BillingInfoValidationRule != nil {
		return obj.BillingInfoValidationRule
	}

	if obj.Bundle != nil {
		return obj.Bundle
	}

	if obj.CarrierAccount != nil {
		return obj.CarrierAccount
	}

	if obj.Customer != nil {
		return obj.Customer
	}

	if obj.CustomerGroup != nil {
		return obj.CustomerGroup
	}

	if obj.DeliveryLeadTime != nil {
		return obj.DeliveryLeadTime
	}

	if obj.Geocoder != nil {
		return obj.Geocoder
	}

	if obj.GiftCard != nil {
		return obj.GiftCard
	}

	if obj.GiftCardRecipient != nil {
		return obj.GiftCardRecipient
	}

	if obj.InventoryModel != nil {
		return obj.InventoryModel
	}

	if obj.Market != nil {
		return obj.Market
	}

	if obj.Merchant != nil {
		return obj.Merchant
	}

	if obj.ModelPackage != nil {
		return obj.ModelPackage
	}

	if obj.ModelReturn != nil {
		return obj.ModelReturn
	}

	if obj.Order != nil {
		return obj.Order
	}

	if obj.Parcel != nil {
		return obj.Parcel
	}

	if obj.PaymentMethod != nil {
		return obj.PaymentMethod
	}

	if obj.Price != nil {
		return obj.Price
	}

	if obj.PriceList != nil {
		return obj.PriceList
	}

	if obj.Promotion != nil {
		return obj.Promotion
	}

	if obj.Shipment != nil {
		return obj.Shipment
	}

	if obj.ShippingCategory != nil {
		return obj.ShippingCategory
	}

	if obj.ShippingMethod != nil {
		return obj.ShippingMethod
	}

	if obj.ShippingZone != nil {
		return obj.ShippingZone
	}

	if obj.Sku != nil {
		return obj.Sku
	}

	if obj.SkuOption != nil {
		return obj.SkuOption
	}

	if obj.StockItem != nil {
		return obj.StockItem
	}

	if obj.StockLocation != nil {
		return obj.StockLocation
	}

	if obj.TaxCalculator != nil {
		return obj.TaxCalculator
	}

	if obj.TaxCategory != nil {
		return obj.TaxCategory
	}

	// all schemas are nil
	return nil
}

type NullableAttachmentDataRelationshipsAttachable struct {
	value *AttachmentDataRelationshipsAttachable
	isSet bool
}

func (v NullableAttachmentDataRelationshipsAttachable) Get() *AttachmentDataRelationshipsAttachable {
	return v.value
}

func (v *NullableAttachmentDataRelationshipsAttachable) Set(val *AttachmentDataRelationshipsAttachable) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentDataRelationshipsAttachable) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentDataRelationshipsAttachable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentDataRelationshipsAttachable(val *AttachmentDataRelationshipsAttachable) *NullableAttachmentDataRelationshipsAttachable {
	return &NullableAttachmentDataRelationshipsAttachable{value: val, isSet: true}
}

func (v NullableAttachmentDataRelationshipsAttachable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentDataRelationshipsAttachable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
