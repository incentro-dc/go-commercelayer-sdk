/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ExportCreateDataAttributes struct for ExportCreateDataAttributes
type ExportCreateDataAttributes struct {
	// The type of resource being exported.
	ResourceType string `json:"resource_type"`
	// The format of the export one of 'json' (default) or 'csv'.
	Format *string `json:"format,omitempty"`
	// List of related resources that should be included in the export.
	Includes []string `json:"includes,omitempty"`
	// The filters used to select the records to be exported.
	Filters map[string]interface{} `json:"filters,omitempty"`
	// Send this attribute if you want to skip exporting of resources IDs.
	SkipIds *bool `json:"skip_ids,omitempty"`
	// Send this attribute if you want to skip exporting of relationships IDs.
	SkipRelIds *bool `json:"skip_rel_ids,omitempty"`
	// Send this attribute if you want to skip exporting of resources created_at and updated_at.
	SkipTimestamps *bool `json:"skip_timestamps,omitempty"`
	// Send this attribute if you want to skip exporting of blank values (not suitable for csv format).
	SkipBlanks *bool `json:"skip_blanks,omitempty"`
	// Send this attribute if you want to skip exporting of float and fromatted amounts.
	SkipAmountFormats *bool `json:"skip_amount_formats,omitempty"`
	// A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
	Reference *string `json:"reference,omitempty"`
	// Any identifier of the third party system that defines the reference code
	ReferenceOrigin *string `json:"reference_origin,omitempty"`
	// Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewExportCreateDataAttributes instantiates a new ExportCreateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCreateDataAttributes(resourceType string) *ExportCreateDataAttributes {
	this := ExportCreateDataAttributes{}
	this.ResourceType = resourceType
	return &this
}

// NewExportCreateDataAttributesWithDefaults instantiates a new ExportCreateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCreateDataAttributesWithDefaults() *ExportCreateDataAttributes {
	this := ExportCreateDataAttributes{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *ExportCreateDataAttributes) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ExportCreateDataAttributes) SetResourceType(v string) {
	o.ResourceType = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ExportCreateDataAttributes) SetFormat(v string) {
	o.Format = &v
}

// GetIncludes returns the Includes field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetIncludes() []string {
	if o == nil || o.Includes == nil {
		var ret []string
		return ret
	}
	return o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetIncludesOk() ([]string, bool) {
	if o == nil || o.Includes == nil {
		return nil, false
	}
	return o.Includes, true
}

// HasIncludes returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasIncludes() bool {
	if o != nil && o.Includes != nil {
		return true
	}

	return false
}

// SetIncludes gets a reference to the given []string and assigns it to the Includes field.
func (o *ExportCreateDataAttributes) SetIncludes(v []string) {
	o.Includes = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetFilters() map[string]interface{} {
	if o == nil || o.Filters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetFiltersOk() (map[string]interface{}, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]interface{} and assigns it to the Filters field.
func (o *ExportCreateDataAttributes) SetFilters(v map[string]interface{}) {
	o.Filters = v
}

// GetSkipIds returns the SkipIds field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetSkipIds() bool {
	if o == nil || o.SkipIds == nil {
		var ret bool
		return ret
	}
	return *o.SkipIds
}

// GetSkipIdsOk returns a tuple with the SkipIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetSkipIdsOk() (*bool, bool) {
	if o == nil || o.SkipIds == nil {
		return nil, false
	}
	return o.SkipIds, true
}

// HasSkipIds returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasSkipIds() bool {
	if o != nil && o.SkipIds != nil {
		return true
	}

	return false
}

// SetSkipIds gets a reference to the given bool and assigns it to the SkipIds field.
func (o *ExportCreateDataAttributes) SetSkipIds(v bool) {
	o.SkipIds = &v
}

// GetSkipRelIds returns the SkipRelIds field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetSkipRelIds() bool {
	if o == nil || o.SkipRelIds == nil {
		var ret bool
		return ret
	}
	return *o.SkipRelIds
}

// GetSkipRelIdsOk returns a tuple with the SkipRelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetSkipRelIdsOk() (*bool, bool) {
	if o == nil || o.SkipRelIds == nil {
		return nil, false
	}
	return o.SkipRelIds, true
}

// HasSkipRelIds returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasSkipRelIds() bool {
	if o != nil && o.SkipRelIds != nil {
		return true
	}

	return false
}

// SetSkipRelIds gets a reference to the given bool and assigns it to the SkipRelIds field.
func (o *ExportCreateDataAttributes) SetSkipRelIds(v bool) {
	o.SkipRelIds = &v
}

// GetSkipTimestamps returns the SkipTimestamps field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetSkipTimestamps() bool {
	if o == nil || o.SkipTimestamps == nil {
		var ret bool
		return ret
	}
	return *o.SkipTimestamps
}

// GetSkipTimestampsOk returns a tuple with the SkipTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetSkipTimestampsOk() (*bool, bool) {
	if o == nil || o.SkipTimestamps == nil {
		return nil, false
	}
	return o.SkipTimestamps, true
}

// HasSkipTimestamps returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasSkipTimestamps() bool {
	if o != nil && o.SkipTimestamps != nil {
		return true
	}

	return false
}

// SetSkipTimestamps gets a reference to the given bool and assigns it to the SkipTimestamps field.
func (o *ExportCreateDataAttributes) SetSkipTimestamps(v bool) {
	o.SkipTimestamps = &v
}

// GetSkipBlanks returns the SkipBlanks field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetSkipBlanks() bool {
	if o == nil || o.SkipBlanks == nil {
		var ret bool
		return ret
	}
	return *o.SkipBlanks
}

// GetSkipBlanksOk returns a tuple with the SkipBlanks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetSkipBlanksOk() (*bool, bool) {
	if o == nil || o.SkipBlanks == nil {
		return nil, false
	}
	return o.SkipBlanks, true
}

// HasSkipBlanks returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasSkipBlanks() bool {
	if o != nil && o.SkipBlanks != nil {
		return true
	}

	return false
}

// SetSkipBlanks gets a reference to the given bool and assigns it to the SkipBlanks field.
func (o *ExportCreateDataAttributes) SetSkipBlanks(v bool) {
	o.SkipBlanks = &v
}

// GetSkipAmountFormats returns the SkipAmountFormats field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetSkipAmountFormats() bool {
	if o == nil || o.SkipAmountFormats == nil {
		var ret bool
		return ret
	}
	return *o.SkipAmountFormats
}

// GetSkipAmountFormatsOk returns a tuple with the SkipAmountFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetSkipAmountFormatsOk() (*bool, bool) {
	if o == nil || o.SkipAmountFormats == nil {
		return nil, false
	}
	return o.SkipAmountFormats, true
}

// HasSkipAmountFormats returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasSkipAmountFormats() bool {
	if o != nil && o.SkipAmountFormats != nil {
		return true
	}

	return false
}

// SetSkipAmountFormats gets a reference to the given bool and assigns it to the SkipAmountFormats field.
func (o *ExportCreateDataAttributes) SetSkipAmountFormats(v bool) {
	o.SkipAmountFormats = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ExportCreateDataAttributes) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceOrigin returns the ReferenceOrigin field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetReferenceOrigin() string {
	if o == nil || o.ReferenceOrigin == nil {
		var ret string
		return ret
	}
	return *o.ReferenceOrigin
}

// GetReferenceOriginOk returns a tuple with the ReferenceOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetReferenceOriginOk() (*string, bool) {
	if o == nil || o.ReferenceOrigin == nil {
		return nil, false
	}
	return o.ReferenceOrigin, true
}

// HasReferenceOrigin returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasReferenceOrigin() bool {
	if o != nil && o.ReferenceOrigin != nil {
		return true
	}

	return false
}

// SetReferenceOrigin gets a reference to the given string and assigns it to the ReferenceOrigin field.
func (o *ExportCreateDataAttributes) SetReferenceOrigin(v string) {
	o.ReferenceOrigin = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ExportCreateDataAttributes) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateDataAttributes) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ExportCreateDataAttributes) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ExportCreateDataAttributes) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o ExportCreateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Includes != nil {
		toSerialize["includes"] = o.Includes
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.SkipIds != nil {
		toSerialize["skip_ids"] = o.SkipIds
	}
	if o.SkipRelIds != nil {
		toSerialize["skip_rel_ids"] = o.SkipRelIds
	}
	if o.SkipTimestamps != nil {
		toSerialize["skip_timestamps"] = o.SkipTimestamps
	}
	if o.SkipBlanks != nil {
		toSerialize["skip_blanks"] = o.SkipBlanks
	}
	if o.SkipAmountFormats != nil {
		toSerialize["skip_amount_formats"] = o.SkipAmountFormats
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.ReferenceOrigin != nil {
		toSerialize["reference_origin"] = o.ReferenceOrigin
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableExportCreateDataAttributes struct {
	value *ExportCreateDataAttributes
	isSet bool
}

func (v NullableExportCreateDataAttributes) Get() *ExportCreateDataAttributes {
	return v.value
}

func (v *NullableExportCreateDataAttributes) Set(val *ExportCreateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCreateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCreateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCreateDataAttributes(val *ExportCreateDataAttributes) *NullableExportCreateDataAttributes {
	return &NullableExportCreateDataAttributes{value: val, isSet: true}
}

func (v NullableExportCreateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCreateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
