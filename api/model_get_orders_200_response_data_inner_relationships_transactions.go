/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 2.7.3
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// GETOrders200ResponseDataInnerRelationshipsTransactions - struct for GETOrders200ResponseDataInnerRelationshipsTransactions
type GETOrders200ResponseDataInnerRelationshipsTransactions struct {
	Authorization *Authorization
	Capture       *Capture
	Refund        *Refund
	Void          *Void
}

// AuthorizationAsGETOrders200ResponseDataInnerRelationshipsTransactions is a convenience function that returns Authorization wrapped in GETOrders200ResponseDataInnerRelationshipsTransactions
func AuthorizationAsGETOrders200ResponseDataInnerRelationshipsTransactions(v *Authorization) GETOrders200ResponseDataInnerRelationshipsTransactions {
	return GETOrders200ResponseDataInnerRelationshipsTransactions{
		Authorization: v,
	}
}

// CaptureAsGETOrders200ResponseDataInnerRelationshipsTransactions is a convenience function that returns Capture wrapped in GETOrders200ResponseDataInnerRelationshipsTransactions
func CaptureAsGETOrders200ResponseDataInnerRelationshipsTransactions(v *Capture) GETOrders200ResponseDataInnerRelationshipsTransactions {
	return GETOrders200ResponseDataInnerRelationshipsTransactions{
		Capture: v,
	}
}

// RefundAsGETOrders200ResponseDataInnerRelationshipsTransactions is a convenience function that returns Refund wrapped in GETOrders200ResponseDataInnerRelationshipsTransactions
func RefundAsGETOrders200ResponseDataInnerRelationshipsTransactions(v *Refund) GETOrders200ResponseDataInnerRelationshipsTransactions {
	return GETOrders200ResponseDataInnerRelationshipsTransactions{
		Refund: v,
	}
}

// VoidAsGETOrders200ResponseDataInnerRelationshipsTransactions is a convenience function that returns Void wrapped in GETOrders200ResponseDataInnerRelationshipsTransactions
func VoidAsGETOrders200ResponseDataInnerRelationshipsTransactions(v *Void) GETOrders200ResponseDataInnerRelationshipsTransactions {
	return GETOrders200ResponseDataInnerRelationshipsTransactions{
		Void: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GETOrders200ResponseDataInnerRelationshipsTransactions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Authorization
	err = newStrictDecoder(data).Decode(&dst.Authorization)
	if err == nil {
		jsonAuthorization, _ := json.Marshal(dst.Authorization)
		if string(jsonAuthorization) == "{}" { // empty struct
			dst.Authorization = nil
		} else {
			match++
		}
	} else {
		dst.Authorization = nil
	}

	// try to unmarshal data into Capture
	err = newStrictDecoder(data).Decode(&dst.Capture)
	if err == nil {
		jsonCapture, _ := json.Marshal(dst.Capture)
		if string(jsonCapture) == "{}" { // empty struct
			dst.Capture = nil
		} else {
			match++
		}
	} else {
		dst.Capture = nil
	}

	// try to unmarshal data into Refund
	err = newStrictDecoder(data).Decode(&dst.Refund)
	if err == nil {
		jsonRefund, _ := json.Marshal(dst.Refund)
		if string(jsonRefund) == "{}" { // empty struct
			dst.Refund = nil
		} else {
			match++
		}
	} else {
		dst.Refund = nil
	}

	// try to unmarshal data into Void
	err = newStrictDecoder(data).Decode(&dst.Void)
	if err == nil {
		jsonVoid, _ := json.Marshal(dst.Void)
		if string(jsonVoid) == "{}" { // empty struct
			dst.Void = nil
		} else {
			match++
		}
	} else {
		dst.Void = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Authorization = nil
		dst.Capture = nil
		dst.Refund = nil
		dst.Void = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GETOrders200ResponseDataInnerRelationshipsTransactions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GETOrders200ResponseDataInnerRelationshipsTransactions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GETOrders200ResponseDataInnerRelationshipsTransactions) MarshalJSON() ([]byte, error) {
	if src.Authorization != nil {
		return json.Marshal(&src.Authorization)
	}

	if src.Capture != nil {
		return json.Marshal(&src.Capture)
	}

	if src.Refund != nil {
		return json.Marshal(&src.Refund)
	}

	if src.Void != nil {
		return json.Marshal(&src.Void)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GETOrders200ResponseDataInnerRelationshipsTransactions) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Authorization != nil {
		return obj.Authorization
	}

	if obj.Capture != nil {
		return obj.Capture
	}

	if obj.Refund != nil {
		return obj.Refund
	}

	if obj.Void != nil {
		return obj.Void
	}

	// all schemas are nil
	return nil
}

type NullableGETOrders200ResponseDataInnerRelationshipsTransactions struct {
	value *GETOrders200ResponseDataInnerRelationshipsTransactions
	isSet bool
}

func (v NullableGETOrders200ResponseDataInnerRelationshipsTransactions) Get() *GETOrders200ResponseDataInnerRelationshipsTransactions {
	return v.value
}

func (v *NullableGETOrders200ResponseDataInnerRelationshipsTransactions) Set(val *GETOrders200ResponseDataInnerRelationshipsTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableGETOrders200ResponseDataInnerRelationshipsTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableGETOrders200ResponseDataInnerRelationshipsTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGETOrders200ResponseDataInnerRelationshipsTransactions(val *GETOrders200ResponseDataInnerRelationshipsTransactions) *NullableGETOrders200ResponseDataInnerRelationshipsTransactions {
	return &NullableGETOrders200ResponseDataInnerRelationshipsTransactions{value: val, isSet: true}
}

func (v NullableGETOrders200ResponseDataInnerRelationshipsTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGETOrders200ResponseDataInnerRelationshipsTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
