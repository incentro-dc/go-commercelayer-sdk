/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.4
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ImportData struct for ImportData
type ImportData struct {
	// The resource's type
	Type          string                                   `json:"type"`
	Attributes    GETImports200ResponseDataInnerAttributes `json:"attributes"`
	Relationships *CleanupDataRelationships                `json:"relationships,omitempty"`
}

// NewImportData instantiates a new ImportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportData(type_ string, attributes GETImports200ResponseDataInnerAttributes) *ImportData {
	this := ImportData{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewImportDataWithDefaults instantiates a new ImportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportDataWithDefaults() *ImportData {
	this := ImportData{}
	return &this
}

// GetType returns the Type field value
func (o *ImportData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImportData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImportData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *ImportData) GetAttributes() GETImports200ResponseDataInnerAttributes {
	if o == nil {
		var ret GETImports200ResponseDataInnerAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *ImportData) GetAttributesOk() (*GETImports200ResponseDataInnerAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *ImportData) SetAttributes(v GETImports200ResponseDataInnerAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *ImportData) GetRelationships() CleanupDataRelationships {
	if o == nil || o.Relationships == nil {
		var ret CleanupDataRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportData) GetRelationshipsOk() (*CleanupDataRelationships, bool) {
	if o == nil || o.Relationships == nil {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *ImportData) HasRelationships() bool {
	if o != nil && o.Relationships != nil {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given CleanupDataRelationships and assigns it to the Relationships field.
func (o *ImportData) SetRelationships(v CleanupDataRelationships) {
	o.Relationships = &v
}

func (o ImportData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Relationships != nil {
		toSerialize["relationships"] = o.Relationships
	}
	return json.Marshal(toSerialize)
}

type NullableImportData struct {
	value *ImportData
	isSet bool
}

func (v NullableImportData) Get() *ImportData {
	return v.value
}

func (v *NullableImportData) Set(val *ImportData) {
	v.value = val
	v.isSet = true
}

func (v NullableImportData) IsSet() bool {
	return v.isSet
}

func (v *NullableImportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportData(val *ImportData) *NullableImportData {
	return &NullableImportData{value: val, isSet: true}
}

func (v NullableImportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
