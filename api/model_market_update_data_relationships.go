/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MarketUpdateDataRelationships struct for MarketUpdateDataRelationships
type MarketUpdateDataRelationships struct {
	Merchant       *MarketDataRelationshipsMerchant                        `json:"merchant,omitempty"`
	PriceList      *MarketDataRelationshipsPriceList                       `json:"price_list,omitempty"`
	InventoryModel *InventoryReturnLocationDataRelationshipsInventoryModel `json:"inventory_model,omitempty"`
	TaxCalculator  *MarketDataRelationshipsTaxCalculator                   `json:"tax_calculator,omitempty"`
	CustomerGroup  *CustomerDataRelationshipsCustomerGroup                 `json:"customer_group,omitempty"`
}

// NewMarketUpdateDataRelationships instantiates a new MarketUpdateDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketUpdateDataRelationships() *MarketUpdateDataRelationships {
	this := MarketUpdateDataRelationships{}
	return &this
}

// NewMarketUpdateDataRelationshipsWithDefaults instantiates a new MarketUpdateDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketUpdateDataRelationshipsWithDefaults() *MarketUpdateDataRelationships {
	this := MarketUpdateDataRelationships{}
	return &this
}

// GetMerchant returns the Merchant field value if set, zero value otherwise.
func (o *MarketUpdateDataRelationships) GetMerchant() MarketDataRelationshipsMerchant {
	if o == nil || o.Merchant == nil {
		var ret MarketDataRelationshipsMerchant
		return ret
	}
	return *o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketUpdateDataRelationships) GetMerchantOk() (*MarketDataRelationshipsMerchant, bool) {
	if o == nil || o.Merchant == nil {
		return nil, false
	}
	return o.Merchant, true
}

// HasMerchant returns a boolean if a field has been set.
func (o *MarketUpdateDataRelationships) HasMerchant() bool {
	if o != nil && o.Merchant != nil {
		return true
	}

	return false
}

// SetMerchant gets a reference to the given MarketDataRelationshipsMerchant and assigns it to the Merchant field.
func (o *MarketUpdateDataRelationships) SetMerchant(v MarketDataRelationshipsMerchant) {
	o.Merchant = &v
}

// GetPriceList returns the PriceList field value if set, zero value otherwise.
func (o *MarketUpdateDataRelationships) GetPriceList() MarketDataRelationshipsPriceList {
	if o == nil || o.PriceList == nil {
		var ret MarketDataRelationshipsPriceList
		return ret
	}
	return *o.PriceList
}

// GetPriceListOk returns a tuple with the PriceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketUpdateDataRelationships) GetPriceListOk() (*MarketDataRelationshipsPriceList, bool) {
	if o == nil || o.PriceList == nil {
		return nil, false
	}
	return o.PriceList, true
}

// HasPriceList returns a boolean if a field has been set.
func (o *MarketUpdateDataRelationships) HasPriceList() bool {
	if o != nil && o.PriceList != nil {
		return true
	}

	return false
}

// SetPriceList gets a reference to the given MarketDataRelationshipsPriceList and assigns it to the PriceList field.
func (o *MarketUpdateDataRelationships) SetPriceList(v MarketDataRelationshipsPriceList) {
	o.PriceList = &v
}

// GetInventoryModel returns the InventoryModel field value if set, zero value otherwise.
func (o *MarketUpdateDataRelationships) GetInventoryModel() InventoryReturnLocationDataRelationshipsInventoryModel {
	if o == nil || o.InventoryModel == nil {
		var ret InventoryReturnLocationDataRelationshipsInventoryModel
		return ret
	}
	return *o.InventoryModel
}

// GetInventoryModelOk returns a tuple with the InventoryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketUpdateDataRelationships) GetInventoryModelOk() (*InventoryReturnLocationDataRelationshipsInventoryModel, bool) {
	if o == nil || o.InventoryModel == nil {
		return nil, false
	}
	return o.InventoryModel, true
}

// HasInventoryModel returns a boolean if a field has been set.
func (o *MarketUpdateDataRelationships) HasInventoryModel() bool {
	if o != nil && o.InventoryModel != nil {
		return true
	}

	return false
}

// SetInventoryModel gets a reference to the given InventoryReturnLocationDataRelationshipsInventoryModel and assigns it to the InventoryModel field.
func (o *MarketUpdateDataRelationships) SetInventoryModel(v InventoryReturnLocationDataRelationshipsInventoryModel) {
	o.InventoryModel = &v
}

// GetTaxCalculator returns the TaxCalculator field value if set, zero value otherwise.
func (o *MarketUpdateDataRelationships) GetTaxCalculator() MarketDataRelationshipsTaxCalculator {
	if o == nil || o.TaxCalculator == nil {
		var ret MarketDataRelationshipsTaxCalculator
		return ret
	}
	return *o.TaxCalculator
}

// GetTaxCalculatorOk returns a tuple with the TaxCalculator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketUpdateDataRelationships) GetTaxCalculatorOk() (*MarketDataRelationshipsTaxCalculator, bool) {
	if o == nil || o.TaxCalculator == nil {
		return nil, false
	}
	return o.TaxCalculator, true
}

// HasTaxCalculator returns a boolean if a field has been set.
func (o *MarketUpdateDataRelationships) HasTaxCalculator() bool {
	if o != nil && o.TaxCalculator != nil {
		return true
	}

	return false
}

// SetTaxCalculator gets a reference to the given MarketDataRelationshipsTaxCalculator and assigns it to the TaxCalculator field.
func (o *MarketUpdateDataRelationships) SetTaxCalculator(v MarketDataRelationshipsTaxCalculator) {
	o.TaxCalculator = &v
}

// GetCustomerGroup returns the CustomerGroup field value if set, zero value otherwise.
func (o *MarketUpdateDataRelationships) GetCustomerGroup() CustomerDataRelationshipsCustomerGroup {
	if o == nil || o.CustomerGroup == nil {
		var ret CustomerDataRelationshipsCustomerGroup
		return ret
	}
	return *o.CustomerGroup
}

// GetCustomerGroupOk returns a tuple with the CustomerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketUpdateDataRelationships) GetCustomerGroupOk() (*CustomerDataRelationshipsCustomerGroup, bool) {
	if o == nil || o.CustomerGroup == nil {
		return nil, false
	}
	return o.CustomerGroup, true
}

// HasCustomerGroup returns a boolean if a field has been set.
func (o *MarketUpdateDataRelationships) HasCustomerGroup() bool {
	if o != nil && o.CustomerGroup != nil {
		return true
	}

	return false
}

// SetCustomerGroup gets a reference to the given CustomerDataRelationshipsCustomerGroup and assigns it to the CustomerGroup field.
func (o *MarketUpdateDataRelationships) SetCustomerGroup(v CustomerDataRelationshipsCustomerGroup) {
	o.CustomerGroup = &v
}

func (o MarketUpdateDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Merchant != nil {
		toSerialize["merchant"] = o.Merchant
	}
	if o.PriceList != nil {
		toSerialize["price_list"] = o.PriceList
	}
	if o.InventoryModel != nil {
		toSerialize["inventory_model"] = o.InventoryModel
	}
	if o.TaxCalculator != nil {
		toSerialize["tax_calculator"] = o.TaxCalculator
	}
	if o.CustomerGroup != nil {
		toSerialize["customer_group"] = o.CustomerGroup
	}
	return json.Marshal(toSerialize)
}

type NullableMarketUpdateDataRelationships struct {
	value *MarketUpdateDataRelationships
	isSet bool
}

func (v NullableMarketUpdateDataRelationships) Get() *MarketUpdateDataRelationships {
	return v.value
}

func (v *NullableMarketUpdateDataRelationships) Set(val *MarketUpdateDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketUpdateDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketUpdateDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketUpdateDataRelationships(val *MarketUpdateDataRelationships) *NullableMarketUpdateDataRelationships {
	return &NullableMarketUpdateDataRelationships{value: val, isSet: true}
}

func (v NullableMarketUpdateDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketUpdateDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
