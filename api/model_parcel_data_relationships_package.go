/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.2
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ParcelDataRelationshipsPackage struct for ParcelDataRelationshipsPackage
type ParcelDataRelationshipsPackage struct {
	Data ParcelDataRelationshipsPackageData `json:"data"`
}

// NewParcelDataRelationshipsPackage instantiates a new ParcelDataRelationshipsPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcelDataRelationshipsPackage(data ParcelDataRelationshipsPackageData) *ParcelDataRelationshipsPackage {
	this := ParcelDataRelationshipsPackage{}
	this.Data = data
	return &this
}

// NewParcelDataRelationshipsPackageWithDefaults instantiates a new ParcelDataRelationshipsPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcelDataRelationshipsPackageWithDefaults() *ParcelDataRelationshipsPackage {
	this := ParcelDataRelationshipsPackage{}
	return &this
}

// GetData returns the Data field value
func (o *ParcelDataRelationshipsPackage) GetData() ParcelDataRelationshipsPackageData {
	if o == nil {
		var ret ParcelDataRelationshipsPackageData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ParcelDataRelationshipsPackage) GetDataOk() (*ParcelDataRelationshipsPackageData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ParcelDataRelationshipsPackage) SetData(v ParcelDataRelationshipsPackageData) {
	o.Data = v
}

func (o ParcelDataRelationshipsPackage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableParcelDataRelationshipsPackage struct {
	value *ParcelDataRelationshipsPackage
	isSet bool
}

func (v NullableParcelDataRelationshipsPackage) Get() *ParcelDataRelationshipsPackage {
	return v.value
}

func (v *NullableParcelDataRelationshipsPackage) Set(val *ParcelDataRelationshipsPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelDataRelationshipsPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelDataRelationshipsPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelDataRelationshipsPackage(val *ParcelDataRelationshipsPackage) *NullableParcelDataRelationshipsPackage {
	return &NullableParcelDataRelationshipsPackage{value: val, isSet: true}
}

func (v NullableParcelDataRelationshipsPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelDataRelationshipsPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
