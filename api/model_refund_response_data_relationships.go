/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RefundResponseDataRelationships struct for RefundResponseDataRelationships
type RefundResponseDataRelationships struct {
	Order            *AdyenPaymentResponseDataRelationshipsOrder      `json:"order,omitempty"`
	ReferenceCapture *RefundResponseDataRelationshipsReferenceCapture `json:"reference_capture,omitempty"`
	Events           *CustomerAddressResponseDataRelationshipsEvents  `json:"events,omitempty"`
}

// NewRefundResponseDataRelationships instantiates a new RefundResponseDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundResponseDataRelationships() *RefundResponseDataRelationships {
	this := RefundResponseDataRelationships{}
	return &this
}

// NewRefundResponseDataRelationshipsWithDefaults instantiates a new RefundResponseDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundResponseDataRelationshipsWithDefaults() *RefundResponseDataRelationships {
	this := RefundResponseDataRelationships{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *RefundResponseDataRelationships) GetOrder() AdyenPaymentResponseDataRelationshipsOrder {
	if o == nil || o.Order == nil {
		var ret AdyenPaymentResponseDataRelationshipsOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundResponseDataRelationships) GetOrderOk() (*AdyenPaymentResponseDataRelationshipsOrder, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *RefundResponseDataRelationships) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given AdyenPaymentResponseDataRelationshipsOrder and assigns it to the Order field.
func (o *RefundResponseDataRelationships) SetOrder(v AdyenPaymentResponseDataRelationshipsOrder) {
	o.Order = &v
}

// GetReferenceCapture returns the ReferenceCapture field value if set, zero value otherwise.
func (o *RefundResponseDataRelationships) GetReferenceCapture() RefundResponseDataRelationshipsReferenceCapture {
	if o == nil || o.ReferenceCapture == nil {
		var ret RefundResponseDataRelationshipsReferenceCapture
		return ret
	}
	return *o.ReferenceCapture
}

// GetReferenceCaptureOk returns a tuple with the ReferenceCapture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundResponseDataRelationships) GetReferenceCaptureOk() (*RefundResponseDataRelationshipsReferenceCapture, bool) {
	if o == nil || o.ReferenceCapture == nil {
		return nil, false
	}
	return o.ReferenceCapture, true
}

// HasReferenceCapture returns a boolean if a field has been set.
func (o *RefundResponseDataRelationships) HasReferenceCapture() bool {
	if o != nil && o.ReferenceCapture != nil {
		return true
	}

	return false
}

// SetReferenceCapture gets a reference to the given RefundResponseDataRelationshipsReferenceCapture and assigns it to the ReferenceCapture field.
func (o *RefundResponseDataRelationships) SetReferenceCapture(v RefundResponseDataRelationshipsReferenceCapture) {
	o.ReferenceCapture = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *RefundResponseDataRelationships) GetEvents() CustomerAddressResponseDataRelationshipsEvents {
	if o == nil || o.Events == nil {
		var ret CustomerAddressResponseDataRelationshipsEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundResponseDataRelationships) GetEventsOk() (*CustomerAddressResponseDataRelationshipsEvents, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *RefundResponseDataRelationships) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given CustomerAddressResponseDataRelationshipsEvents and assigns it to the Events field.
func (o *RefundResponseDataRelationships) SetEvents(v CustomerAddressResponseDataRelationshipsEvents) {
	o.Events = &v
}

func (o RefundResponseDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.ReferenceCapture != nil {
		toSerialize["reference_capture"] = o.ReferenceCapture
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableRefundResponseDataRelationships struct {
	value *RefundResponseDataRelationships
	isSet bool
}

func (v NullableRefundResponseDataRelationships) Get() *RefundResponseDataRelationships {
	return v.value
}

func (v *NullableRefundResponseDataRelationships) Set(val *RefundResponseDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundResponseDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundResponseDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundResponseDataRelationships(val *RefundResponseDataRelationships) *NullableRefundResponseDataRelationships {
	return &NullableRefundResponseDataRelationships{value: val, isSet: true}
}

func (v NullableRefundResponseDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundResponseDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
