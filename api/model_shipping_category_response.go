/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ShippingCategoryResponse struct for ShippingCategoryResponse
type ShippingCategoryResponse struct {
	Data *ShippingCategoryResponseData `json:"data,omitempty"`
}

// NewShippingCategoryResponse instantiates a new ShippingCategoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShippingCategoryResponse() *ShippingCategoryResponse {
	this := ShippingCategoryResponse{}
	return &this
}

// NewShippingCategoryResponseWithDefaults instantiates a new ShippingCategoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingCategoryResponseWithDefaults() *ShippingCategoryResponse {
	this := ShippingCategoryResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ShippingCategoryResponse) GetData() ShippingCategoryResponseData {
	if o == nil || o.Data == nil {
		var ret ShippingCategoryResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingCategoryResponse) GetDataOk() (*ShippingCategoryResponseData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ShippingCategoryResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ShippingCategoryResponseData and assigns it to the Data field.
func (o *ShippingCategoryResponse) SetData(v ShippingCategoryResponseData) {
	o.Data = &v
}

func (o ShippingCategoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableShippingCategoryResponse struct {
	value *ShippingCategoryResponse
	isSet bool
}

func (v NullableShippingCategoryResponse) Get() *ShippingCategoryResponse {
	return v.value
}

func (v *NullableShippingCategoryResponse) Set(val *ShippingCategoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingCategoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingCategoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingCategoryResponse(val *ShippingCategoryResponse) *NullableShippingCategoryResponse {
	return &NullableShippingCategoryResponse{value: val, isSet: true}
}

func (v NullableShippingCategoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingCategoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
