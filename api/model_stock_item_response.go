/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// StockItemResponse struct for StockItemResponse
type StockItemResponse struct {
	Data *StockItemResponseData `json:"data,omitempty"`
}

// NewStockItemResponse instantiates a new StockItemResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockItemResponse() *StockItemResponse {
	this := StockItemResponse{}
	return &this
}

// NewStockItemResponseWithDefaults instantiates a new StockItemResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockItemResponseWithDefaults() *StockItemResponse {
	this := StockItemResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *StockItemResponse) GetData() StockItemResponseData {
	if o == nil || o.Data == nil {
		var ret StockItemResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockItemResponse) GetDataOk() (*StockItemResponseData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *StockItemResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given StockItemResponseData and assigns it to the Data field.
func (o *StockItemResponse) SetData(v StockItemResponseData) {
	o.Data = &v
}

func (o StockItemResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableStockItemResponse struct {
	value *StockItemResponse
	isSet bool
}

func (v NullableStockItemResponse) Get() *StockItemResponse {
	return v.value
}

func (v *NullableStockItemResponse) Set(val *StockItemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStockItemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStockItemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockItemResponse(val *StockItemResponse) *NullableStockItemResponse {
	return &NullableStockItemResponse{value: val, isSet: true}
}

func (v NullableStockItemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockItemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
