/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 3.0.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// StockTransferUpdateDataAttributes struct for StockTransferUpdateDataAttributes
type StockTransferUpdateDataAttributes struct {
	// The code of the associated SKU.
	SkuCode *string `json:"sku_code,omitempty"`
	// Send this attribute if you want to mark this stock transfer as upcoming.
	Upcoming *bool `json:"_upcoming,omitempty"`
	// Send this attribute if you want to start picking this stock transfer.
	Picking *bool `json:"_picking,omitempty"`
	// Send this attribute if you want to mark this stock transfer as in transit.
	InTransit *bool `json:"_in_transit,omitempty"`
	// Send this attribute if you want to complete this stock transfer.
	Complete *bool `json:"_complete,omitempty"`
	// Send this attribute if you want to cancel this stock transfer.
	Cancel *bool `json:"_cancel,omitempty"`
	// A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
	Reference *string `json:"reference,omitempty"`
	// Any identifier of the third party system that defines the reference code
	ReferenceOrigin *string `json:"reference_origin,omitempty"`
	// Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewStockTransferUpdateDataAttributes instantiates a new StockTransferUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockTransferUpdateDataAttributes() *StockTransferUpdateDataAttributes {
	this := StockTransferUpdateDataAttributes{}
	return &this
}

// NewStockTransferUpdateDataAttributesWithDefaults instantiates a new StockTransferUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockTransferUpdateDataAttributesWithDefaults() *StockTransferUpdateDataAttributes {
	this := StockTransferUpdateDataAttributes{}
	return &this
}

// GetSkuCode returns the SkuCode field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetSkuCode() string {
	if o == nil || o.SkuCode == nil {
		var ret string
		return ret
	}
	return *o.SkuCode
}

// GetSkuCodeOk returns a tuple with the SkuCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetSkuCodeOk() (*string, bool) {
	if o == nil || o.SkuCode == nil {
		return nil, false
	}
	return o.SkuCode, true
}

// HasSkuCode returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasSkuCode() bool {
	if o != nil && o.SkuCode != nil {
		return true
	}

	return false
}

// SetSkuCode gets a reference to the given string and assigns it to the SkuCode field.
func (o *StockTransferUpdateDataAttributes) SetSkuCode(v string) {
	o.SkuCode = &v
}

// GetUpcoming returns the Upcoming field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetUpcoming() bool {
	if o == nil || o.Upcoming == nil {
		var ret bool
		return ret
	}
	return *o.Upcoming
}

// GetUpcomingOk returns a tuple with the Upcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetUpcomingOk() (*bool, bool) {
	if o == nil || o.Upcoming == nil {
		return nil, false
	}
	return o.Upcoming, true
}

// HasUpcoming returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasUpcoming() bool {
	if o != nil && o.Upcoming != nil {
		return true
	}

	return false
}

// SetUpcoming gets a reference to the given bool and assigns it to the Upcoming field.
func (o *StockTransferUpdateDataAttributes) SetUpcoming(v bool) {
	o.Upcoming = &v
}

// GetPicking returns the Picking field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetPicking() bool {
	if o == nil || o.Picking == nil {
		var ret bool
		return ret
	}
	return *o.Picking
}

// GetPickingOk returns a tuple with the Picking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetPickingOk() (*bool, bool) {
	if o == nil || o.Picking == nil {
		return nil, false
	}
	return o.Picking, true
}

// HasPicking returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasPicking() bool {
	if o != nil && o.Picking != nil {
		return true
	}

	return false
}

// SetPicking gets a reference to the given bool and assigns it to the Picking field.
func (o *StockTransferUpdateDataAttributes) SetPicking(v bool) {
	o.Picking = &v
}

// GetInTransit returns the InTransit field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetInTransit() bool {
	if o == nil || o.InTransit == nil {
		var ret bool
		return ret
	}
	return *o.InTransit
}

// GetInTransitOk returns a tuple with the InTransit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetInTransitOk() (*bool, bool) {
	if o == nil || o.InTransit == nil {
		return nil, false
	}
	return o.InTransit, true
}

// HasInTransit returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasInTransit() bool {
	if o != nil && o.InTransit != nil {
		return true
	}

	return false
}

// SetInTransit gets a reference to the given bool and assigns it to the InTransit field.
func (o *StockTransferUpdateDataAttributes) SetInTransit(v bool) {
	o.InTransit = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetComplete() bool {
	if o == nil || o.Complete == nil {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetCompleteOk() (*bool, bool) {
	if o == nil || o.Complete == nil {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasComplete() bool {
	if o != nil && o.Complete != nil {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *StockTransferUpdateDataAttributes) SetComplete(v bool) {
	o.Complete = &v
}

// GetCancel returns the Cancel field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetCancel() bool {
	if o == nil || o.Cancel == nil {
		var ret bool
		return ret
	}
	return *o.Cancel
}

// GetCancelOk returns a tuple with the Cancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetCancelOk() (*bool, bool) {
	if o == nil || o.Cancel == nil {
		return nil, false
	}
	return o.Cancel, true
}

// HasCancel returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasCancel() bool {
	if o != nil && o.Cancel != nil {
		return true
	}

	return false
}

// SetCancel gets a reference to the given bool and assigns it to the Cancel field.
func (o *StockTransferUpdateDataAttributes) SetCancel(v bool) {
	o.Cancel = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *StockTransferUpdateDataAttributes) SetReference(v string) {
	o.Reference = &v
}

// GetReferenceOrigin returns the ReferenceOrigin field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetReferenceOrigin() string {
	if o == nil || o.ReferenceOrigin == nil {
		var ret string
		return ret
	}
	return *o.ReferenceOrigin
}

// GetReferenceOriginOk returns a tuple with the ReferenceOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetReferenceOriginOk() (*string, bool) {
	if o == nil || o.ReferenceOrigin == nil {
		return nil, false
	}
	return o.ReferenceOrigin, true
}

// HasReferenceOrigin returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasReferenceOrigin() bool {
	if o != nil && o.ReferenceOrigin != nil {
		return true
	}

	return false
}

// SetReferenceOrigin gets a reference to the given string and assigns it to the ReferenceOrigin field.
func (o *StockTransferUpdateDataAttributes) SetReferenceOrigin(v string) {
	o.ReferenceOrigin = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *StockTransferUpdateDataAttributes) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockTransferUpdateDataAttributes) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *StockTransferUpdateDataAttributes) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *StockTransferUpdateDataAttributes) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o StockTransferUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SkuCode != nil {
		toSerialize["sku_code"] = o.SkuCode
	}
	if o.Upcoming != nil {
		toSerialize["_upcoming"] = o.Upcoming
	}
	if o.Picking != nil {
		toSerialize["_picking"] = o.Picking
	}
	if o.InTransit != nil {
		toSerialize["_in_transit"] = o.InTransit
	}
	if o.Complete != nil {
		toSerialize["_complete"] = o.Complete
	}
	if o.Cancel != nil {
		toSerialize["_cancel"] = o.Cancel
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.ReferenceOrigin != nil {
		toSerialize["reference_origin"] = o.ReferenceOrigin
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableStockTransferUpdateDataAttributes struct {
	value *StockTransferUpdateDataAttributes
	isSet bool
}

func (v NullableStockTransferUpdateDataAttributes) Get() *StockTransferUpdateDataAttributes {
	return v.value
}

func (v *NullableStockTransferUpdateDataAttributes) Set(val *StockTransferUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableStockTransferUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableStockTransferUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockTransferUpdateDataAttributes(val *StockTransferUpdateDataAttributes) *NullableStockTransferUpdateDataAttributes {
	return &NullableStockTransferUpdateDataAttributes{value: val, isSet: true}
}

func (v NullableStockTransferUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockTransferUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
