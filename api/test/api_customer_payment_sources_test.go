/*
Commerce Layer API

Testing CustomerPaymentSourcesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_CustomerPaymentSourcesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomerPaymentSourcesApiService DELETECustomerPaymentSourcesCustomerPaymentSourceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		httpRes, err := apiClient.CustomerPaymentSourcesApi.DELETECustomerPaymentSourcesCustomerPaymentSourceId(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETCustomerIdCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.CustomerPaymentSourcesApi.GETCustomerIdCustomerPaymentSources(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomerPaymentSourcesApi.GETCustomerPaymentSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETCustomerPaymentSourcesCustomerPaymentSourceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		resp, httpRes, err := apiClient.CustomerPaymentSourcesApi.GETCustomerPaymentSourcesCustomerPaymentSourceId(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETExternalPaymentIdWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.CustomerPaymentSourcesApi.GETExternalPaymentIdWallet(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETOrderIdAvailableCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.CustomerPaymentSourcesApi.GETOrderIdAvailableCustomerPaymentSources(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService GETOrderSubscriptionIdCustomerPaymentSource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.CustomerPaymentSourcesApi.GETOrderSubscriptionIdCustomerPaymentSource(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService PATCHCustomerPaymentSourcesCustomerPaymentSourceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		resp, httpRes, err := apiClient.CustomerPaymentSourcesApi.PATCHCustomerPaymentSourcesCustomerPaymentSourceId(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerPaymentSourcesApiService POSTCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CustomerPaymentSourcesApi.POSTCustomerPaymentSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
