/*
Commerce Layer API

Testing KlarnaPaymentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_KlarnaPaymentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KlarnaPaymentsApiService DELETEKlarnaPaymentsKlarnaPaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		httpRes, err := apiClient.KlarnaPaymentsApi.DELETEKlarnaPaymentsKlarnaPaymentId(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KlarnaPaymentsApiService GETKlarnaGatewayIdKlarnaPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaGatewayId interface{}

		httpRes, err := apiClient.KlarnaPaymentsApi.GETKlarnaGatewayIdKlarnaPayments(context.Background(), klarnaGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KlarnaPaymentsApiService GETKlarnaPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KlarnaPaymentsApi.GETKlarnaPayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KlarnaPaymentsApiService GETKlarnaPaymentsKlarnaPaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		resp, httpRes, err := apiClient.KlarnaPaymentsApi.GETKlarnaPaymentsKlarnaPaymentId(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KlarnaPaymentsApiService PATCHKlarnaPaymentsKlarnaPaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		resp, httpRes, err := apiClient.KlarnaPaymentsApi.PATCHKlarnaPaymentsKlarnaPaymentId(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KlarnaPaymentsApiService POSTKlarnaPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KlarnaPaymentsApi.POSTKlarnaPayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
