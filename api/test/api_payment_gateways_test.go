/*
Commerce Layer API

Testing PaymentGatewaysApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_PaymentGatewaysApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PaymentGatewaysApiService GETAdyenPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETAdyenPaymentIdPaymentGateway(context.Background(), adyenPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETAxervePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axervePaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETAxervePaymentIdPaymentGateway(context.Background(), axervePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETBraintreePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreePaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETBraintreePaymentIdPaymentGateway(context.Background(), braintreePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETCheckoutComPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETCheckoutComPaymentIdPaymentGateway(context.Background(), checkoutComPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETExternalPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETExternalPaymentIdPaymentGateway(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETKlarnaPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETKlarnaPaymentIdPaymentGateway(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETPaymentGateways", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PaymentGatewaysApi.GETPaymentGateways(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETPaymentGatewaysPaymentGatewayId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentGatewayId interface{}

		resp, httpRes, err := apiClient.PaymentGatewaysApi.GETPaymentGatewaysPaymentGatewayId(context.Background(), paymentGatewayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETPaymentMethodIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETPaymentMethodIdPaymentGateway(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETPaypalPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETPaypalPaymentIdPaymentGateway(context.Background(), paypalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETSatispayPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayPaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETSatispayPaymentIdPaymentGateway(context.Background(), satispayPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaymentGatewaysApiService GETStripePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		httpRes, err := apiClient.PaymentGatewaysApi.GETStripePaymentIdPaymentGateway(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
