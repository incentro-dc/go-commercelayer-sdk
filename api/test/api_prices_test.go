/*
Commerce Layer API

Testing PricesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_PricesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PricesApiService DELETEPricesPriceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.PricesApi.DELETEPricesPriceId(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPriceFrequencyTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceFrequencyTierId interface{}

		httpRes, err := apiClient.PricesApi.GETPriceFrequencyTierIdPrice(context.Background(), priceFrequencyTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPriceListIdPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListId interface{}

		httpRes, err := apiClient.PricesApi.GETPriceListIdPrices(context.Background(), priceListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPriceTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceTierId interface{}

		httpRes, err := apiClient.PricesApi.GETPriceTierIdPrice(context.Background(), priceTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPriceVolumeTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceVolumeTierId interface{}

		httpRes, err := apiClient.PricesApi.GETPriceVolumeTierIdPrice(context.Background(), priceVolumeTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PricesApi.GETPrices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETPricesPriceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		resp, httpRes, err := apiClient.PricesApi.GETPricesPriceId(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService GETSkuIdPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.PricesApi.GETSkuIdPrices(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService PATCHPricesPriceId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		resp, httpRes, err := apiClient.PricesApi.PATCHPricesPriceId(context.Background(), priceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricesApiService POSTPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PricesApi.POSTPrices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
