/*
Commerce Layer API

Testing RecurringOrderCopiesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_RecurringOrderCopiesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RecurringOrderCopiesApiService DELETERecurringOrderCopiesRecurringOrderCopyId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		httpRes, err := apiClient.RecurringOrderCopiesApi.DELETERecurringOrderCopiesRecurringOrderCopyId(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService GETOrderIdRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.RecurringOrderCopiesApi.GETOrderIdRecurringOrderCopies(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService GETOrderSubscriptionIdRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.RecurringOrderCopiesApi.GETOrderSubscriptionIdRecurringOrderCopies(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService GETRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RecurringOrderCopiesApi.GETRecurringOrderCopies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService GETRecurringOrderCopiesRecurringOrderCopyId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		resp, httpRes, err := apiClient.RecurringOrderCopiesApi.GETRecurringOrderCopiesRecurringOrderCopyId(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService PATCHRecurringOrderCopiesRecurringOrderCopyId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		resp, httpRes, err := apiClient.RecurringOrderCopiesApi.PATCHRecurringOrderCopiesRecurringOrderCopyId(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecurringOrderCopiesApiService POSTRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RecurringOrderCopiesApi.POSTRecurringOrderCopies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
