/*
Commerce Layer API

Testing StripePaymentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_StripePaymentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StripePaymentsApiService DELETEStripePaymentsStripePaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		httpRes, err := apiClient.StripePaymentsApi.DELETEStripePaymentsStripePaymentId(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StripePaymentsApiService GETStripeGatewayIdStripePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripeGatewayId interface{}

		httpRes, err := apiClient.StripePaymentsApi.GETStripeGatewayIdStripePayments(context.Background(), stripeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StripePaymentsApiService GETStripePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StripePaymentsApi.GETStripePayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StripePaymentsApiService GETStripePaymentsStripePaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		resp, httpRes, err := apiClient.StripePaymentsApi.GETStripePaymentsStripePaymentId(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StripePaymentsApiService PATCHStripePaymentsStripePaymentId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		resp, httpRes, err := apiClient.StripePaymentsApi.PATCHStripePaymentsStripePaymentId(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StripePaymentsApiService POSTStripePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StripePaymentsApi.POSTStripePayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
