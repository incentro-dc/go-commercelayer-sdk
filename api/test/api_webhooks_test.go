/*
Commerce Layer API

Testing WebhooksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_WebhooksApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksApiService DELETEWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId interface{}

		httpRes, err := apiClient.WebhooksApi.DELETEWebhooksWebhookId(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService GETEventCallbackIdWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventCallbackId interface{}

		httpRes, err := apiClient.WebhooksApi.GETEventCallbackIdWebhook(context.Background(), eventCallbackId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService GETEventIdWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventId interface{}

		httpRes, err := apiClient.WebhooksApi.GETEventIdWebhooks(context.Background(), eventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService GETWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WebhooksApi.GETWebhooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService GETWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId interface{}

		resp, httpRes, err := apiClient.WebhooksApi.GETWebhooksWebhookId(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService PATCHWebhooksWebhookId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId interface{}

		resp, httpRes, err := apiClient.WebhooksApi.PATCHWebhooksWebhookId(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksApiService POSTWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WebhooksApi.POSTWebhooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
